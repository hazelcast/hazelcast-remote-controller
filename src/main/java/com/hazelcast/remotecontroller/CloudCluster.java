/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hazelcast.remotecontroller;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2022-12-22")
public class CloudCluster implements org.apache.thrift.TBase<CloudCluster, CloudCluster._Fields>, java.io.Serializable, Cloneable, Comparable<CloudCluster> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CloudCluster");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField RELEASE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("releaseName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HAZELCAST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hazelcastVersion", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField IS_TLS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isTlsEnabled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CERTIFICATE_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("certificatePath", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TLS_PASSWORD_FIELD_DESC = new org.apache.thrift.protocol.TField("tlsPassword", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new CloudClusterStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new CloudClusterTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String id; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String name; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String releaseName; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String hazelcastVersion; // required
  public boolean isTlsEnabled; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String state; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String token; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String certificatePath; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String tlsPassword; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    NAME((short)2, "name"),
    RELEASE_NAME((short)3, "releaseName"),
    HAZELCAST_VERSION((short)4, "hazelcastVersion"),
    IS_TLS_ENABLED((short)5, "isTlsEnabled"),
    STATE((short)6, "state"),
    TOKEN((short)7, "token"),
    CERTIFICATE_PATH((short)8, "certificatePath"),
    TLS_PASSWORD((short)9, "tlsPassword");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // NAME
          return NAME;
        case 3: // RELEASE_NAME
          return RELEASE_NAME;
        case 4: // HAZELCAST_VERSION
          return HAZELCAST_VERSION;
        case 5: // IS_TLS_ENABLED
          return IS_TLS_ENABLED;
        case 6: // STATE
          return STATE;
        case 7: // TOKEN
          return TOKEN;
        case 8: // CERTIFICATE_PATH
          return CERTIFICATE_PATH;
        case 9: // TLS_PASSWORD
          return TLS_PASSWORD;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ISTLSENABLED_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RELEASE_NAME, new org.apache.thrift.meta_data.FieldMetaData("releaseName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HAZELCAST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hazelcastVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IS_TLS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isTlsEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CERTIFICATE_PATH, new org.apache.thrift.meta_data.FieldMetaData("certificatePath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TLS_PASSWORD, new org.apache.thrift.meta_data.FieldMetaData("tlsPassword", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CloudCluster.class, metaDataMap);
  }

  public CloudCluster() {
  }

  public CloudCluster(
    java.lang.String id,
    java.lang.String name,
    java.lang.String releaseName,
    java.lang.String hazelcastVersion,
    boolean isTlsEnabled,
    java.lang.String state,
    java.lang.String token,
    java.lang.String certificatePath,
    java.lang.String tlsPassword)
  {
    this();
    this.id = id;
    this.name = name;
    this.releaseName = releaseName;
    this.hazelcastVersion = hazelcastVersion;
    this.isTlsEnabled = isTlsEnabled;
    setIsTlsEnabledIsSet(true);
    this.state = state;
    this.token = token;
    this.certificatePath = certificatePath;
    this.tlsPassword = tlsPassword;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CloudCluster(CloudCluster other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetReleaseName()) {
      this.releaseName = other.releaseName;
    }
    if (other.isSetHazelcastVersion()) {
      this.hazelcastVersion = other.hazelcastVersion;
    }
    this.isTlsEnabled = other.isTlsEnabled;
    if (other.isSetState()) {
      this.state = other.state;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetCertificatePath()) {
      this.certificatePath = other.certificatePath;
    }
    if (other.isSetTlsPassword()) {
      this.tlsPassword = other.tlsPassword;
    }
  }

  public CloudCluster deepCopy() {
    return new CloudCluster(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.name = null;
    this.releaseName = null;
    this.hazelcastVersion = null;
    setIsTlsEnabledIsSet(false);
    this.isTlsEnabled = false;
    this.state = null;
    this.token = null;
    this.certificatePath = null;
    this.tlsPassword = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getId() {
    return this.id;
  }

  public CloudCluster setId(@org.apache.thrift.annotation.Nullable java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getName() {
    return this.name;
  }

  public CloudCluster setName(@org.apache.thrift.annotation.Nullable java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getReleaseName() {
    return this.releaseName;
  }

  public CloudCluster setReleaseName(@org.apache.thrift.annotation.Nullable java.lang.String releaseName) {
    this.releaseName = releaseName;
    return this;
  }

  public void unsetReleaseName() {
    this.releaseName = null;
  }

  /** Returns true if field releaseName is set (has been assigned a value) and false otherwise */
  public boolean isSetReleaseName() {
    return this.releaseName != null;
  }

  public void setReleaseNameIsSet(boolean value) {
    if (!value) {
      this.releaseName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getHazelcastVersion() {
    return this.hazelcastVersion;
  }

  public CloudCluster setHazelcastVersion(@org.apache.thrift.annotation.Nullable java.lang.String hazelcastVersion) {
    this.hazelcastVersion = hazelcastVersion;
    return this;
  }

  public void unsetHazelcastVersion() {
    this.hazelcastVersion = null;
  }

  /** Returns true if field hazelcastVersion is set (has been assigned a value) and false otherwise */
  public boolean isSetHazelcastVersion() {
    return this.hazelcastVersion != null;
  }

  public void setHazelcastVersionIsSet(boolean value) {
    if (!value) {
      this.hazelcastVersion = null;
    }
  }

  public boolean isIsTlsEnabled() {
    return this.isTlsEnabled;
  }

  public CloudCluster setIsTlsEnabled(boolean isTlsEnabled) {
    this.isTlsEnabled = isTlsEnabled;
    setIsTlsEnabledIsSet(true);
    return this;
  }

  public void unsetIsTlsEnabled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID);
  }

  /** Returns true if field isTlsEnabled is set (has been assigned a value) and false otherwise */
  public boolean isSetIsTlsEnabled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID);
  }

  public void setIsTlsEnabledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getState() {
    return this.state;
  }

  public CloudCluster setState(@org.apache.thrift.annotation.Nullable java.lang.String state) {
    this.state = state;
    return this;
  }

  public void unsetState() {
    this.state = null;
  }

  /** Returns true if field state is set (has been assigned a value) and false otherwise */
  public boolean isSetState() {
    return this.state != null;
  }

  public void setStateIsSet(boolean value) {
    if (!value) {
      this.state = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getToken() {
    return this.token;
  }

  public CloudCluster setToken(@org.apache.thrift.annotation.Nullable java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getCertificatePath() {
    return this.certificatePath;
  }

  public CloudCluster setCertificatePath(@org.apache.thrift.annotation.Nullable java.lang.String certificatePath) {
    this.certificatePath = certificatePath;
    return this;
  }

  public void unsetCertificatePath() {
    this.certificatePath = null;
  }

  /** Returns true if field certificatePath is set (has been assigned a value) and false otherwise */
  public boolean isSetCertificatePath() {
    return this.certificatePath != null;
  }

  public void setCertificatePathIsSet(boolean value) {
    if (!value) {
      this.certificatePath = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getTlsPassword() {
    return this.tlsPassword;
  }

  public CloudCluster setTlsPassword(@org.apache.thrift.annotation.Nullable java.lang.String tlsPassword) {
    this.tlsPassword = tlsPassword;
    return this;
  }

  public void unsetTlsPassword() {
    this.tlsPassword = null;
  }

  /** Returns true if field tlsPassword is set (has been assigned a value) and false otherwise */
  public boolean isSetTlsPassword() {
    return this.tlsPassword != null;
  }

  public void setTlsPasswordIsSet(boolean value) {
    if (!value) {
      this.tlsPassword = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case RELEASE_NAME:
      if (value == null) {
        unsetReleaseName();
      } else {
        setReleaseName((java.lang.String)value);
      }
      break;

    case HAZELCAST_VERSION:
      if (value == null) {
        unsetHazelcastVersion();
      } else {
        setHazelcastVersion((java.lang.String)value);
      }
      break;

    case IS_TLS_ENABLED:
      if (value == null) {
        unsetIsTlsEnabled();
      } else {
        setIsTlsEnabled((java.lang.Boolean)value);
      }
      break;

    case STATE:
      if (value == null) {
        unsetState();
      } else {
        setState((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case CERTIFICATE_PATH:
      if (value == null) {
        unsetCertificatePath();
      } else {
        setCertificatePath((java.lang.String)value);
      }
      break;

    case TLS_PASSWORD:
      if (value == null) {
        unsetTlsPassword();
      } else {
        setTlsPassword((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case NAME:
      return getName();

    case RELEASE_NAME:
      return getReleaseName();

    case HAZELCAST_VERSION:
      return getHazelcastVersion();

    case IS_TLS_ENABLED:
      return isIsTlsEnabled();

    case STATE:
      return getState();

    case TOKEN:
      return getToken();

    case CERTIFICATE_PATH:
      return getCertificatePath();

    case TLS_PASSWORD:
      return getTlsPassword();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case NAME:
      return isSetName();
    case RELEASE_NAME:
      return isSetReleaseName();
    case HAZELCAST_VERSION:
      return isSetHazelcastVersion();
    case IS_TLS_ENABLED:
      return isSetIsTlsEnabled();
    case STATE:
      return isSetState();
    case TOKEN:
      return isSetToken();
    case CERTIFICATE_PATH:
      return isSetCertificatePath();
    case TLS_PASSWORD:
      return isSetTlsPassword();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof CloudCluster)
      return this.equals((CloudCluster)that);
    return false;
  }

  public boolean equals(CloudCluster that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_releaseName = true && this.isSetReleaseName();
    boolean that_present_releaseName = true && that.isSetReleaseName();
    if (this_present_releaseName || that_present_releaseName) {
      if (!(this_present_releaseName && that_present_releaseName))
        return false;
      if (!this.releaseName.equals(that.releaseName))
        return false;
    }

    boolean this_present_hazelcastVersion = true && this.isSetHazelcastVersion();
    boolean that_present_hazelcastVersion = true && that.isSetHazelcastVersion();
    if (this_present_hazelcastVersion || that_present_hazelcastVersion) {
      if (!(this_present_hazelcastVersion && that_present_hazelcastVersion))
        return false;
      if (!this.hazelcastVersion.equals(that.hazelcastVersion))
        return false;
    }

    boolean this_present_isTlsEnabled = true;
    boolean that_present_isTlsEnabled = true;
    if (this_present_isTlsEnabled || that_present_isTlsEnabled) {
      if (!(this_present_isTlsEnabled && that_present_isTlsEnabled))
        return false;
      if (this.isTlsEnabled != that.isTlsEnabled)
        return false;
    }

    boolean this_present_state = true && this.isSetState();
    boolean that_present_state = true && that.isSetState();
    if (this_present_state || that_present_state) {
      if (!(this_present_state && that_present_state))
        return false;
      if (!this.state.equals(that.state))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_certificatePath = true && this.isSetCertificatePath();
    boolean that_present_certificatePath = true && that.isSetCertificatePath();
    if (this_present_certificatePath || that_present_certificatePath) {
      if (!(this_present_certificatePath && that_present_certificatePath))
        return false;
      if (!this.certificatePath.equals(that.certificatePath))
        return false;
    }

    boolean this_present_tlsPassword = true && this.isSetTlsPassword();
    boolean that_present_tlsPassword = true && that.isSetTlsPassword();
    if (this_present_tlsPassword || that_present_tlsPassword) {
      if (!(this_present_tlsPassword && that_present_tlsPassword))
        return false;
      if (!this.tlsPassword.equals(that.tlsPassword))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetReleaseName()) ? 131071 : 524287);
    if (isSetReleaseName())
      hashCode = hashCode * 8191 + releaseName.hashCode();

    hashCode = hashCode * 8191 + ((isSetHazelcastVersion()) ? 131071 : 524287);
    if (isSetHazelcastVersion())
      hashCode = hashCode * 8191 + hazelcastVersion.hashCode();

    hashCode = hashCode * 8191 + ((isTlsEnabled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
    if (isSetState())
      hashCode = hashCode * 8191 + state.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetCertificatePath()) ? 131071 : 524287);
    if (isSetCertificatePath())
      hashCode = hashCode * 8191 + certificatePath.hashCode();

    hashCode = hashCode * 8191 + ((isSetTlsPassword()) ? 131071 : 524287);
    if (isSetTlsPassword())
      hashCode = hashCode * 8191 + tlsPassword.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(CloudCluster other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetId(), other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetName(), other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetReleaseName(), other.isSetReleaseName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleaseName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.releaseName, other.releaseName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetHazelcastVersion(), other.isSetHazelcastVersion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHazelcastVersion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hazelcastVersion, other.hazelcastVersion);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetIsTlsEnabled(), other.isSetIsTlsEnabled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIsTlsEnabled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTlsEnabled, other.isTlsEnabled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetState(), other.isSetState());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetState()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetToken(), other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetCertificatePath(), other.isSetCertificatePath());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCertificatePath()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.certificatePath, other.certificatePath);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTlsPassword(), other.isSetTlsPassword());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTlsPassword()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tlsPassword, other.tlsPassword);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("CloudCluster(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("releaseName:");
    if (this.releaseName == null) {
      sb.append("null");
    } else {
      sb.append(this.releaseName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hazelcastVersion:");
    if (this.hazelcastVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.hazelcastVersion);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isTlsEnabled:");
    sb.append(this.isTlsEnabled);
    first = false;
    if (!first) sb.append(", ");
    sb.append("state:");
    if (this.state == null) {
      sb.append("null");
    } else {
      sb.append(this.state);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("certificatePath:");
    if (this.certificatePath == null) {
      sb.append("null");
    } else {
      sb.append(this.certificatePath);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tlsPassword:");
    if (this.tlsPassword == null) {
      sb.append("null");
    } else {
      sb.append(this.tlsPassword);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CloudClusterStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CloudClusterStandardScheme getScheme() {
      return new CloudClusterStandardScheme();
    }
  }

  private static class CloudClusterStandardScheme extends org.apache.thrift.scheme.StandardScheme<CloudCluster> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CloudCluster struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // RELEASE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.releaseName = iprot.readString();
              struct.setReleaseNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HAZELCAST_VERSION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hazelcastVersion = iprot.readString();
              struct.setHazelcastVersionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // IS_TLS_ENABLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.isTlsEnabled = iprot.readBool();
              struct.setIsTlsEnabledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.state = iprot.readString();
              struct.setStateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CERTIFICATE_PATH
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.certificatePath = iprot.readString();
              struct.setCertificatePathIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TLS_PASSWORD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tlsPassword = iprot.readString();
              struct.setTlsPasswordIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CloudCluster struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.releaseName != null) {
        oprot.writeFieldBegin(RELEASE_NAME_FIELD_DESC);
        oprot.writeString(struct.releaseName);
        oprot.writeFieldEnd();
      }
      if (struct.hazelcastVersion != null) {
        oprot.writeFieldBegin(HAZELCAST_VERSION_FIELD_DESC);
        oprot.writeString(struct.hazelcastVersion);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(IS_TLS_ENABLED_FIELD_DESC);
      oprot.writeBool(struct.isTlsEnabled);
      oprot.writeFieldEnd();
      if (struct.state != null) {
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeString(struct.state);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.certificatePath != null) {
        oprot.writeFieldBegin(CERTIFICATE_PATH_FIELD_DESC);
        oprot.writeString(struct.certificatePath);
        oprot.writeFieldEnd();
      }
      if (struct.tlsPassword != null) {
        oprot.writeFieldBegin(TLS_PASSWORD_FIELD_DESC);
        oprot.writeString(struct.tlsPassword);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CloudClusterTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public CloudClusterTupleScheme getScheme() {
      return new CloudClusterTupleScheme();
    }
  }

  private static class CloudClusterTupleScheme extends org.apache.thrift.scheme.TupleScheme<CloudCluster> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CloudCluster struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetName()) {
        optionals.set(1);
      }
      if (struct.isSetReleaseName()) {
        optionals.set(2);
      }
      if (struct.isSetHazelcastVersion()) {
        optionals.set(3);
      }
      if (struct.isSetIsTlsEnabled()) {
        optionals.set(4);
      }
      if (struct.isSetState()) {
        optionals.set(5);
      }
      if (struct.isSetToken()) {
        optionals.set(6);
      }
      if (struct.isSetCertificatePath()) {
        optionals.set(7);
      }
      if (struct.isSetTlsPassword()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetReleaseName()) {
        oprot.writeString(struct.releaseName);
      }
      if (struct.isSetHazelcastVersion()) {
        oprot.writeString(struct.hazelcastVersion);
      }
      if (struct.isSetIsTlsEnabled()) {
        oprot.writeBool(struct.isTlsEnabled);
      }
      if (struct.isSetState()) {
        oprot.writeString(struct.state);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetCertificatePath()) {
        oprot.writeString(struct.certificatePath);
      }
      if (struct.isSetTlsPassword()) {
        oprot.writeString(struct.tlsPassword);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CloudCluster struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.releaseName = iprot.readString();
        struct.setReleaseNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hazelcastVersion = iprot.readString();
        struct.setHazelcastVersionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.isTlsEnabled = iprot.readBool();
        struct.setIsTlsEnabledIsSet(true);
      }
      if (incoming.get(5)) {
        struct.state = iprot.readString();
        struct.setStateIsSet(true);
      }
      if (incoming.get(6)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(7)) {
        struct.certificatePath = iprot.readString();
        struct.setCertificatePathIsSet(true);
      }
      if (incoming.get(8)) {
        struct.tlsPassword = iprot.readString();
        struct.setTlsPasswordIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

