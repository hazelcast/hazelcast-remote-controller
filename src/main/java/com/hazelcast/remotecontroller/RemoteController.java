/**
 * Autogenerated by Thrift Compiler (0.15.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.hazelcast.remotecontroller;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.15.0)", date = "2023-04-10")
public class RemoteController {

  public interface Iface {

    public boolean ping() throws org.apache.thrift.TException;

    public boolean clean() throws org.apache.thrift.TException;

    public boolean exit() throws org.apache.thrift.TException;

    public Cluster createCluster(java.lang.String hzVersion, java.lang.String xmlconfig) throws ServerException, org.apache.thrift.TException;

    public Cluster createClusterKeepClusterName(java.lang.String hzVersion, java.lang.String xmlconfig) throws ServerException, org.apache.thrift.TException;

    public boolean shutdownCluster(java.lang.String clusterId) throws org.apache.thrift.TException;

    public boolean terminateCluster(java.lang.String clusterId) throws org.apache.thrift.TException;

    public Member startMember(java.lang.String clusterId) throws ServerException, org.apache.thrift.TException;

    public boolean shutdownMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException;

    public boolean terminateMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException;

    public boolean suspendMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException;

    public boolean resumeMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException;

    public DockerCluster createDockerCluster(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey) throws ServerException, org.apache.thrift.TException;

    public boolean shutdownDockerCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException;

    public DockerMember startDockerMember(java.lang.String dockerClusterId) throws ServerException, org.apache.thrift.TException;

    public boolean shutdownDockerMember(java.lang.String dockerClusterId, java.lang.String containerId) throws org.apache.thrift.TException;

    public boolean splitClusterAs(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2) throws org.apache.thrift.TException;

    public boolean mergeCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException;

    /**
     * Reads the environment variables and calls loginToCloud() method with these variables.
     * @throws CloudException
     */
    public void loginToCloudUsingEnvironment() throws CloudException, org.apache.thrift.TException;

    /**
     * Logins to the cloud, sets the bearerToken, baseUrl variables in CloudManager to make it ready to use cloud API
     * @throws CloudException
     * 
     * @param baseUrl -> Base url of the cloud environment. i.e. https://uat.hazelcast.cloud
     * @param apiKey -> Api key of the hazelcast cloud
     * @param apiSecret -> Api secret of the hazelcast cloud
     * 
     * @param baseUrl
     * @param apiKey
     * @param apiSecret
     */
    public void loginToCloud(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret) throws CloudException, org.apache.thrift.TException;

    /**
     * Creates a cluster
     * @return CloudCluster
     * @throws CloudException
     * 
     * @param hazelcastVersion -> Hazelcast version
     * @param isTlsEnabled -> True if ssl enabled cluster is requested, otherwise false.
     * 
     * @param hazelcastVersion
     * @param isTlsEnabled
     */
    public CloudCluster createCloudCluster(java.lang.String hazelcastVersion, boolean isTlsEnabled) throws CloudException, org.apache.thrift.TException;

    /**
     * Get information of the given cluster
     * @return CloudCluster
     * @throws CloudException
     * 
     * @param cloudClusterId -> Id of the cluster
     * 
     * @param cloudClusterId
     */
    public CloudCluster getCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException;

    /**
     * Stops the given cluster
     * @return CloudCluster
     * @throws CloudException
     * 
     * @param cloudClusterId -> Id of the cluster
     * 
     * @param cloudClusterId
     */
    public CloudCluster stopCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException;

    /**
     * Resumes the given cluster
     * @return CloudCluster
     * @throws CloudException
     * 
     * @param cloudClusterId
     * 
     * @param cloudClusterId
     */
    public CloudCluster resumeCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException;

    /**
     * Deletes the given cluster
     * @return boolean
     * @throws CloudException
     * 
     * @param cloudClusterId
     * 
     * @param cloudClusterId
     */
    public void deleteCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException;

    public Response executeOnController(java.lang.String clusterId, java.lang.String script, Lang lang) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void clean(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void exit(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createCluster(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException;

    public void createClusterKeepClusterName(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException;

    public void shutdownCluster(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void terminateCluster(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void startMember(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<Member> resultHandler) throws org.apache.thrift.TException;

    public void shutdownMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void terminateMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void suspendMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void resumeMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createDockerCluster(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey, org.apache.thrift.async.AsyncMethodCallback<DockerCluster> resultHandler) throws org.apache.thrift.TException;

    public void shutdownDockerCluster(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void startDockerMember(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<DockerMember> resultHandler) throws org.apache.thrift.TException;

    public void shutdownDockerMember(java.lang.String dockerClusterId, java.lang.String containerId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void splitClusterAs(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void mergeCluster(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void loginToCloudUsingEnvironment(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void loginToCloud(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void createCloudCluster(java.lang.String hazelcastVersion, boolean isTlsEnabled, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException;

    public void getCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException;

    public void stopCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException;

    public void resumeCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException;

    public void deleteCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void executeOnController(java.lang.String clusterId, java.lang.String script, Lang lang, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean ping() throws org.apache.thrift.TException
    {
      send_ping();
      return recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public boolean recv_ping() throws org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ping failed: unknown result");
    }

    public boolean clean() throws org.apache.thrift.TException
    {
      send_clean();
      return recv_clean();
    }

    public void send_clean() throws org.apache.thrift.TException
    {
      clean_args args = new clean_args();
      sendBase("clean", args);
    }

    public boolean recv_clean() throws org.apache.thrift.TException
    {
      clean_result result = new clean_result();
      receiveBase(result, "clean");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "clean failed: unknown result");
    }

    public boolean exit() throws org.apache.thrift.TException
    {
      send_exit();
      return recv_exit();
    }

    public void send_exit() throws org.apache.thrift.TException
    {
      exit_args args = new exit_args();
      sendBase("exit", args);
    }

    public boolean recv_exit() throws org.apache.thrift.TException
    {
      exit_result result = new exit_result();
      receiveBase(result, "exit");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "exit failed: unknown result");
    }

    public Cluster createCluster(java.lang.String hzVersion, java.lang.String xmlconfig) throws ServerException, org.apache.thrift.TException
    {
      send_createCluster(hzVersion, xmlconfig);
      return recv_createCluster();
    }

    public void send_createCluster(java.lang.String hzVersion, java.lang.String xmlconfig) throws org.apache.thrift.TException
    {
      createCluster_args args = new createCluster_args();
      args.setHzVersion(hzVersion);
      args.setXmlconfig(xmlconfig);
      sendBase("createCluster", args);
    }

    public Cluster recv_createCluster() throws ServerException, org.apache.thrift.TException
    {
      createCluster_result result = new createCluster_result();
      receiveBase(result, "createCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCluster failed: unknown result");
    }

    public Cluster createClusterKeepClusterName(java.lang.String hzVersion, java.lang.String xmlconfig) throws ServerException, org.apache.thrift.TException
    {
      send_createClusterKeepClusterName(hzVersion, xmlconfig);
      return recv_createClusterKeepClusterName();
    }

    public void send_createClusterKeepClusterName(java.lang.String hzVersion, java.lang.String xmlconfig) throws org.apache.thrift.TException
    {
      createClusterKeepClusterName_args args = new createClusterKeepClusterName_args();
      args.setHzVersion(hzVersion);
      args.setXmlconfig(xmlconfig);
      sendBase("createClusterKeepClusterName", args);
    }

    public Cluster recv_createClusterKeepClusterName() throws ServerException, org.apache.thrift.TException
    {
      createClusterKeepClusterName_result result = new createClusterKeepClusterName_result();
      receiveBase(result, "createClusterKeepClusterName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createClusterKeepClusterName failed: unknown result");
    }

    public boolean shutdownCluster(java.lang.String clusterId) throws org.apache.thrift.TException
    {
      send_shutdownCluster(clusterId);
      return recv_shutdownCluster();
    }

    public void send_shutdownCluster(java.lang.String clusterId) throws org.apache.thrift.TException
    {
      shutdownCluster_args args = new shutdownCluster_args();
      args.setClusterId(clusterId);
      sendBase("shutdownCluster", args);
    }

    public boolean recv_shutdownCluster() throws org.apache.thrift.TException
    {
      shutdownCluster_result result = new shutdownCluster_result();
      receiveBase(result, "shutdownCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shutdownCluster failed: unknown result");
    }

    public boolean terminateCluster(java.lang.String clusterId) throws org.apache.thrift.TException
    {
      send_terminateCluster(clusterId);
      return recv_terminateCluster();
    }

    public void send_terminateCluster(java.lang.String clusterId) throws org.apache.thrift.TException
    {
      terminateCluster_args args = new terminateCluster_args();
      args.setClusterId(clusterId);
      sendBase("terminateCluster", args);
    }

    public boolean recv_terminateCluster() throws org.apache.thrift.TException
    {
      terminateCluster_result result = new terminateCluster_result();
      receiveBase(result, "terminateCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateCluster failed: unknown result");
    }

    public Member startMember(java.lang.String clusterId) throws ServerException, org.apache.thrift.TException
    {
      send_startMember(clusterId);
      return recv_startMember();
    }

    public void send_startMember(java.lang.String clusterId) throws org.apache.thrift.TException
    {
      startMember_args args = new startMember_args();
      args.setClusterId(clusterId);
      sendBase("startMember", args);
    }

    public Member recv_startMember() throws ServerException, org.apache.thrift.TException
    {
      startMember_result result = new startMember_result();
      receiveBase(result, "startMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startMember failed: unknown result");
    }

    public boolean shutdownMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      send_shutdownMember(clusterId, memberId);
      return recv_shutdownMember();
    }

    public void send_shutdownMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      shutdownMember_args args = new shutdownMember_args();
      args.setClusterId(clusterId);
      args.setMemberId(memberId);
      sendBase("shutdownMember", args);
    }

    public boolean recv_shutdownMember() throws org.apache.thrift.TException
    {
      shutdownMember_result result = new shutdownMember_result();
      receiveBase(result, "shutdownMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shutdownMember failed: unknown result");
    }

    public boolean terminateMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      send_terminateMember(clusterId, memberId);
      return recv_terminateMember();
    }

    public void send_terminateMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      terminateMember_args args = new terminateMember_args();
      args.setClusterId(clusterId);
      args.setMemberId(memberId);
      sendBase("terminateMember", args);
    }

    public boolean recv_terminateMember() throws org.apache.thrift.TException
    {
      terminateMember_result result = new terminateMember_result();
      receiveBase(result, "terminateMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateMember failed: unknown result");
    }

    public boolean suspendMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      send_suspendMember(clusterId, memberId);
      return recv_suspendMember();
    }

    public void send_suspendMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      suspendMember_args args = new suspendMember_args();
      args.setClusterId(clusterId);
      args.setMemberId(memberId);
      sendBase("suspendMember", args);
    }

    public boolean recv_suspendMember() throws org.apache.thrift.TException
    {
      suspendMember_result result = new suspendMember_result();
      receiveBase(result, "suspendMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "suspendMember failed: unknown result");
    }

    public boolean resumeMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      send_resumeMember(clusterId, memberId);
      return recv_resumeMember();
    }

    public void send_resumeMember(java.lang.String clusterId, java.lang.String memberId) throws org.apache.thrift.TException
    {
      resumeMember_args args = new resumeMember_args();
      args.setClusterId(clusterId);
      args.setMemberId(memberId);
      sendBase("resumeMember", args);
    }

    public boolean recv_resumeMember() throws org.apache.thrift.TException
    {
      resumeMember_result result = new resumeMember_result();
      receiveBase(result, "resumeMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeMember failed: unknown result");
    }

    public DockerCluster createDockerCluster(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey) throws ServerException, org.apache.thrift.TException
    {
      send_createDockerCluster(dockerImageString, xmlconfigPath, hazelcastEnterpriseLicenseKey);
      return recv_createDockerCluster();
    }

    public void send_createDockerCluster(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey) throws org.apache.thrift.TException
    {
      createDockerCluster_args args = new createDockerCluster_args();
      args.setDockerImageString(dockerImageString);
      args.setXmlconfigPath(xmlconfigPath);
      args.setHazelcastEnterpriseLicenseKey(hazelcastEnterpriseLicenseKey);
      sendBase("createDockerCluster", args);
    }

    public DockerCluster recv_createDockerCluster() throws ServerException, org.apache.thrift.TException
    {
      createDockerCluster_result result = new createDockerCluster_result();
      receiveBase(result, "createDockerCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createDockerCluster failed: unknown result");
    }

    public boolean shutdownDockerCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException
    {
      send_shutdownDockerCluster(dockerClusterId);
      return recv_shutdownDockerCluster();
    }

    public void send_shutdownDockerCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException
    {
      shutdownDockerCluster_args args = new shutdownDockerCluster_args();
      args.setDockerClusterId(dockerClusterId);
      sendBase("shutdownDockerCluster", args);
    }

    public boolean recv_shutdownDockerCluster() throws org.apache.thrift.TException
    {
      shutdownDockerCluster_result result = new shutdownDockerCluster_result();
      receiveBase(result, "shutdownDockerCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shutdownDockerCluster failed: unknown result");
    }

    public DockerMember startDockerMember(java.lang.String dockerClusterId) throws ServerException, org.apache.thrift.TException
    {
      send_startDockerMember(dockerClusterId);
      return recv_startDockerMember();
    }

    public void send_startDockerMember(java.lang.String dockerClusterId) throws org.apache.thrift.TException
    {
      startDockerMember_args args = new startDockerMember_args();
      args.setDockerClusterId(dockerClusterId);
      sendBase("startDockerMember", args);
    }

    public DockerMember recv_startDockerMember() throws ServerException, org.apache.thrift.TException
    {
      startDockerMember_result result = new startDockerMember_result();
      receiveBase(result, "startDockerMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startDockerMember failed: unknown result");
    }

    public boolean shutdownDockerMember(java.lang.String dockerClusterId, java.lang.String containerId) throws org.apache.thrift.TException
    {
      send_shutdownDockerMember(dockerClusterId, containerId);
      return recv_shutdownDockerMember();
    }

    public void send_shutdownDockerMember(java.lang.String dockerClusterId, java.lang.String containerId) throws org.apache.thrift.TException
    {
      shutdownDockerMember_args args = new shutdownDockerMember_args();
      args.setDockerClusterId(dockerClusterId);
      args.setContainerId(containerId);
      sendBase("shutdownDockerMember", args);
    }

    public boolean recv_shutdownDockerMember() throws org.apache.thrift.TException
    {
      shutdownDockerMember_result result = new shutdownDockerMember_result();
      receiveBase(result, "shutdownDockerMember");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shutdownDockerMember failed: unknown result");
    }

    public boolean splitClusterAs(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2) throws org.apache.thrift.TException
    {
      send_splitClusterAs(dockerClusterId, brain1, brain2);
      return recv_splitClusterAs();
    }

    public void send_splitClusterAs(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2) throws org.apache.thrift.TException
    {
      splitClusterAs_args args = new splitClusterAs_args();
      args.setDockerClusterId(dockerClusterId);
      args.setBrain1(brain1);
      args.setBrain2(brain2);
      sendBase("splitClusterAs", args);
    }

    public boolean recv_splitClusterAs() throws org.apache.thrift.TException
    {
      splitClusterAs_result result = new splitClusterAs_result();
      receiveBase(result, "splitClusterAs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "splitClusterAs failed: unknown result");
    }

    public boolean mergeCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException
    {
      send_mergeCluster(dockerClusterId);
      return recv_mergeCluster();
    }

    public void send_mergeCluster(java.lang.String dockerClusterId) throws org.apache.thrift.TException
    {
      mergeCluster_args args = new mergeCluster_args();
      args.setDockerClusterId(dockerClusterId);
      sendBase("mergeCluster", args);
    }

    public boolean recv_mergeCluster() throws org.apache.thrift.TException
    {
      mergeCluster_result result = new mergeCluster_result();
      receiveBase(result, "mergeCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mergeCluster failed: unknown result");
    }

    public void loginToCloudUsingEnvironment() throws CloudException, org.apache.thrift.TException
    {
      send_loginToCloudUsingEnvironment();
      recv_loginToCloudUsingEnvironment();
    }

    public void send_loginToCloudUsingEnvironment() throws org.apache.thrift.TException
    {
      loginToCloudUsingEnvironment_args args = new loginToCloudUsingEnvironment_args();
      sendBase("loginToCloudUsingEnvironment", args);
    }

    public void recv_loginToCloudUsingEnvironment() throws CloudException, org.apache.thrift.TException
    {
      loginToCloudUsingEnvironment_result result = new loginToCloudUsingEnvironment_result();
      receiveBase(result, "loginToCloudUsingEnvironment");
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      return;
    }

    public void loginToCloud(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret) throws CloudException, org.apache.thrift.TException
    {
      send_loginToCloud(baseUrl, apiKey, apiSecret);
      recv_loginToCloud();
    }

    public void send_loginToCloud(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret) throws org.apache.thrift.TException
    {
      loginToCloud_args args = new loginToCloud_args();
      args.setBaseUrl(baseUrl);
      args.setApiKey(apiKey);
      args.setApiSecret(apiSecret);
      sendBase("loginToCloud", args);
    }

    public void recv_loginToCloud() throws CloudException, org.apache.thrift.TException
    {
      loginToCloud_result result = new loginToCloud_result();
      receiveBase(result, "loginToCloud");
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      return;
    }

    public CloudCluster createCloudCluster(java.lang.String hazelcastVersion, boolean isTlsEnabled) throws CloudException, org.apache.thrift.TException
    {
      send_createCloudCluster(hazelcastVersion, isTlsEnabled);
      return recv_createCloudCluster();
    }

    public void send_createCloudCluster(java.lang.String hazelcastVersion, boolean isTlsEnabled) throws org.apache.thrift.TException
    {
      createCloudCluster_args args = new createCloudCluster_args();
      args.setHazelcastVersion(hazelcastVersion);
      args.setIsTlsEnabled(isTlsEnabled);
      sendBase("createCloudCluster", args);
    }

    public CloudCluster recv_createCloudCluster() throws CloudException, org.apache.thrift.TException
    {
      createCloudCluster_result result = new createCloudCluster_result();
      receiveBase(result, "createCloudCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createCloudCluster failed: unknown result");
    }

    public CloudCluster getCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException
    {
      send_getCloudCluster(cloudClusterId);
      return recv_getCloudCluster();
    }

    public void send_getCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      getCloudCluster_args args = new getCloudCluster_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("getCloudCluster", args);
    }

    public CloudCluster recv_getCloudCluster() throws CloudException, org.apache.thrift.TException
    {
      getCloudCluster_result result = new getCloudCluster_result();
      receiveBase(result, "getCloudCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCloudCluster failed: unknown result");
    }

    public CloudCluster stopCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException
    {
      send_stopCloudCluster(cloudClusterId);
      return recv_stopCloudCluster();
    }

    public void send_stopCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      stopCloudCluster_args args = new stopCloudCluster_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("stopCloudCluster", args);
    }

    public CloudCluster recv_stopCloudCluster() throws CloudException, org.apache.thrift.TException
    {
      stopCloudCluster_result result = new stopCloudCluster_result();
      receiveBase(result, "stopCloudCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stopCloudCluster failed: unknown result");
    }

    public CloudCluster resumeCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException
    {
      send_resumeCloudCluster(cloudClusterId);
      return recv_resumeCloudCluster();
    }

    public void send_resumeCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      resumeCloudCluster_args args = new resumeCloudCluster_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("resumeCloudCluster", args);
    }

    public CloudCluster recv_resumeCloudCluster() throws CloudException, org.apache.thrift.TException
    {
      resumeCloudCluster_result result = new resumeCloudCluster_result();
      receiveBase(result, "resumeCloudCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "resumeCloudCluster failed: unknown result");
    }

    public void deleteCloudCluster(java.lang.String cloudClusterId) throws CloudException, org.apache.thrift.TException
    {
      send_deleteCloudCluster(cloudClusterId);
      recv_deleteCloudCluster();
    }

    public void send_deleteCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      deleteCloudCluster_args args = new deleteCloudCluster_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("deleteCloudCluster", args);
    }

    public void recv_deleteCloudCluster() throws CloudException, org.apache.thrift.TException
    {
      deleteCloudCluster_result result = new deleteCloudCluster_result();
      receiveBase(result, "deleteCloudCluster");
      if (result.cloudException != null) {
        throw result.cloudException;
      }
      return;
    }

    public Response executeOnController(java.lang.String clusterId, java.lang.String script, Lang lang) throws org.apache.thrift.TException
    {
      send_executeOnController(clusterId, script, lang);
      return recv_executeOnController();
    }

    public void send_executeOnController(java.lang.String clusterId, java.lang.String script, Lang lang) throws org.apache.thrift.TException
    {
      executeOnController_args args = new executeOnController_args();
      args.setClusterId(clusterId);
      args.setScript(script);
      args.setLang(lang);
      sendBase("executeOnController", args);
    }

    public Response recv_executeOnController() throws org.apache.thrift.TException
    {
      executeOnController_result result = new executeOnController_result();
      receiveBase(result, "executeOnController");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "executeOnController failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ping();
      }
    }

    public void clean(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      clean_call method_call = new clean_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class clean_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public clean_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("clean", org.apache.thrift.protocol.TMessageType.CALL, 0));
        clean_args args = new clean_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_clean();
      }
    }

    public void exit(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      exit_call method_call = new exit_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class exit_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      public exit_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("exit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        exit_args args = new exit_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_exit();
      }
    }

    public void createCluster(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCluster_call method_call = new createCluster_call(hzVersion, xmlconfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCluster_call extends org.apache.thrift.async.TAsyncMethodCall<Cluster> {
      private java.lang.String hzVersion;
      private java.lang.String xmlconfig;
      public createCluster_call(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hzVersion = hzVersion;
        this.xmlconfig = xmlconfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCluster_args args = new createCluster_args();
        args.setHzVersion(hzVersion);
        args.setXmlconfig(xmlconfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cluster getResult() throws ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCluster();
      }
    }

    public void createClusterKeepClusterName(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createClusterKeepClusterName_call method_call = new createClusterKeepClusterName_call(hzVersion, xmlconfig, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createClusterKeepClusterName_call extends org.apache.thrift.async.TAsyncMethodCall<Cluster> {
      private java.lang.String hzVersion;
      private java.lang.String xmlconfig;
      public createClusterKeepClusterName_call(java.lang.String hzVersion, java.lang.String xmlconfig, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hzVersion = hzVersion;
        this.xmlconfig = xmlconfig;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createClusterKeepClusterName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createClusterKeepClusterName_args args = new createClusterKeepClusterName_args();
        args.setHzVersion(hzVersion);
        args.setXmlconfig(xmlconfig);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Cluster getResult() throws ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createClusterKeepClusterName();
      }
    }

    public void shutdownCluster(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdownCluster_call method_call = new shutdownCluster_call(clusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdownCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      public shutdownCluster_call(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdownCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdownCluster_args args = new shutdownCluster_args();
        args.setClusterId(clusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shutdownCluster();
      }
    }

    public void terminateCluster(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateCluster_call method_call = new terminateCluster_call(clusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      public terminateCluster_call(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateCluster_args args = new terminateCluster_args();
        args.setClusterId(clusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateCluster();
      }
    }

    public void startMember(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<Member> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startMember_call method_call = new startMember_call(clusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startMember_call extends org.apache.thrift.async.TAsyncMethodCall<Member> {
      private java.lang.String clusterId;
      public startMember_call(java.lang.String clusterId, org.apache.thrift.async.AsyncMethodCallback<Member> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startMember_args args = new startMember_args();
        args.setClusterId(clusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Member getResult() throws ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startMember();
      }
    }

    public void shutdownMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdownMember_call method_call = new shutdownMember_call(clusterId, memberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdownMember_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      private java.lang.String memberId;
      public shutdownMember_call(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.memberId = memberId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdownMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdownMember_args args = new shutdownMember_args();
        args.setClusterId(clusterId);
        args.setMemberId(memberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shutdownMember();
      }
    }

    public void terminateMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateMember_call method_call = new terminateMember_call(clusterId, memberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateMember_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      private java.lang.String memberId;
      public terminateMember_call(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.memberId = memberId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateMember_args args = new terminateMember_args();
        args.setClusterId(clusterId);
        args.setMemberId(memberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateMember();
      }
    }

    public void suspendMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      suspendMember_call method_call = new suspendMember_call(clusterId, memberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class suspendMember_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      private java.lang.String memberId;
      public suspendMember_call(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.memberId = memberId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("suspendMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        suspendMember_args args = new suspendMember_args();
        args.setClusterId(clusterId);
        args.setMemberId(memberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_suspendMember();
      }
    }

    public void resumeMember(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeMember_call method_call = new resumeMember_call(clusterId, memberId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeMember_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String clusterId;
      private java.lang.String memberId;
      public resumeMember_call(java.lang.String clusterId, java.lang.String memberId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.memberId = memberId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeMember_args args = new resumeMember_args();
        args.setClusterId(clusterId);
        args.setMemberId(memberId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeMember();
      }
    }

    public void createDockerCluster(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey, org.apache.thrift.async.AsyncMethodCallback<DockerCluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createDockerCluster_call method_call = new createDockerCluster_call(dockerImageString, xmlconfigPath, hazelcastEnterpriseLicenseKey, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createDockerCluster_call extends org.apache.thrift.async.TAsyncMethodCall<DockerCluster> {
      private java.lang.String dockerImageString;
      private java.lang.String xmlconfigPath;
      private java.lang.String hazelcastEnterpriseLicenseKey;
      public createDockerCluster_call(java.lang.String dockerImageString, java.lang.String xmlconfigPath, java.lang.String hazelcastEnterpriseLicenseKey, org.apache.thrift.async.AsyncMethodCallback<DockerCluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerImageString = dockerImageString;
        this.xmlconfigPath = xmlconfigPath;
        this.hazelcastEnterpriseLicenseKey = hazelcastEnterpriseLicenseKey;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createDockerCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createDockerCluster_args args = new createDockerCluster_args();
        args.setDockerImageString(dockerImageString);
        args.setXmlconfigPath(xmlconfigPath);
        args.setHazelcastEnterpriseLicenseKey(hazelcastEnterpriseLicenseKey);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DockerCluster getResult() throws ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createDockerCluster();
      }
    }

    public void shutdownDockerCluster(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdownDockerCluster_call method_call = new shutdownDockerCluster_call(dockerClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdownDockerCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String dockerClusterId;
      public shutdownDockerCluster_call(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerClusterId = dockerClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdownDockerCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdownDockerCluster_args args = new shutdownDockerCluster_args();
        args.setDockerClusterId(dockerClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shutdownDockerCluster();
      }
    }

    public void startDockerMember(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<DockerMember> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startDockerMember_call method_call = new startDockerMember_call(dockerClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startDockerMember_call extends org.apache.thrift.async.TAsyncMethodCall<DockerMember> {
      private java.lang.String dockerClusterId;
      public startDockerMember_call(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<DockerMember> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerClusterId = dockerClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startDockerMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startDockerMember_args args = new startDockerMember_args();
        args.setDockerClusterId(dockerClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public DockerMember getResult() throws ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startDockerMember();
      }
    }

    public void shutdownDockerMember(java.lang.String dockerClusterId, java.lang.String containerId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdownDockerMember_call method_call = new shutdownDockerMember_call(dockerClusterId, containerId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdownDockerMember_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String dockerClusterId;
      private java.lang.String containerId;
      public shutdownDockerMember_call(java.lang.String dockerClusterId, java.lang.String containerId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerClusterId = dockerClusterId;
        this.containerId = containerId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdownDockerMember", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdownDockerMember_args args = new shutdownDockerMember_args();
        args.setDockerClusterId(dockerClusterId);
        args.setContainerId(containerId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shutdownDockerMember();
      }
    }

    public void splitClusterAs(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      splitClusterAs_call method_call = new splitClusterAs_call(dockerClusterId, brain1, brain2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class splitClusterAs_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String dockerClusterId;
      private java.util.List<java.lang.String> brain1;
      private java.util.List<java.lang.String> brain2;
      public splitClusterAs_call(java.lang.String dockerClusterId, java.util.List<java.lang.String> brain1, java.util.List<java.lang.String> brain2, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerClusterId = dockerClusterId;
        this.brain1 = brain1;
        this.brain2 = brain2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("splitClusterAs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        splitClusterAs_args args = new splitClusterAs_args();
        args.setDockerClusterId(dockerClusterId);
        args.setBrain1(brain1);
        args.setBrain2(brain2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_splitClusterAs();
      }
    }

    public void mergeCluster(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mergeCluster_call method_call = new mergeCluster_call(dockerClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mergeCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String dockerClusterId;
      public mergeCluster_call(java.lang.String dockerClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dockerClusterId = dockerClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mergeCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mergeCluster_args args = new mergeCluster_args();
        args.setDockerClusterId(dockerClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mergeCluster();
      }
    }

    public void loginToCloudUsingEnvironment(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginToCloudUsingEnvironment_call method_call = new loginToCloudUsingEnvironment_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginToCloudUsingEnvironment_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public loginToCloudUsingEnvironment_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginToCloudUsingEnvironment", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginToCloudUsingEnvironment_args args = new loginToCloudUsingEnvironment_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void loginToCloud(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      loginToCloud_call method_call = new loginToCloud_call(baseUrl, apiKey, apiSecret, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class loginToCloud_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String baseUrl;
      private java.lang.String apiKey;
      private java.lang.String apiSecret;
      public loginToCloud_call(java.lang.String baseUrl, java.lang.String apiKey, java.lang.String apiSecret, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.baseUrl = baseUrl;
        this.apiKey = apiKey;
        this.apiSecret = apiSecret;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("loginToCloud", org.apache.thrift.protocol.TMessageType.CALL, 0));
        loginToCloud_args args = new loginToCloud_args();
        args.setBaseUrl(baseUrl);
        args.setApiKey(apiKey);
        args.setApiSecret(apiSecret);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void createCloudCluster(java.lang.String hazelcastVersion, boolean isTlsEnabled, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createCloudCluster_call method_call = new createCloudCluster_call(hazelcastVersion, isTlsEnabled, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<CloudCluster> {
      private java.lang.String hazelcastVersion;
      private boolean isTlsEnabled;
      public createCloudCluster_call(java.lang.String hazelcastVersion, boolean isTlsEnabled, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hazelcastVersion = hazelcastVersion;
        this.isTlsEnabled = isTlsEnabled;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createCloudCluster_args args = new createCloudCluster_args();
        args.setHazelcastVersion(hazelcastVersion);
        args.setIsTlsEnabled(isTlsEnabled);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CloudCluster getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createCloudCluster();
      }
    }

    public void getCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCloudCluster_call method_call = new getCloudCluster_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<CloudCluster> {
      private java.lang.String cloudClusterId;
      public getCloudCluster_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCloudCluster_args args = new getCloudCluster_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CloudCluster getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCloudCluster();
      }
    }

    public void stopCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stopCloudCluster_call method_call = new stopCloudCluster_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stopCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<CloudCluster> {
      private java.lang.String cloudClusterId;
      public stopCloudCluster_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stopCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stopCloudCluster_args args = new stopCloudCluster_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CloudCluster getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stopCloudCluster();
      }
    }

    public void resumeCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      resumeCloudCluster_call method_call = new resumeCloudCluster_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class resumeCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<CloudCluster> {
      private java.lang.String cloudClusterId;
      public resumeCloudCluster_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("resumeCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        resumeCloudCluster_args args = new resumeCloudCluster_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public CloudCluster getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_resumeCloudCluster();
      }
    }

    public void deleteCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteCloudCluster_call method_call = new deleteCloudCluster_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      private java.lang.String cloudClusterId;
      public deleteCloudCluster_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteCloudCluster_args args = new deleteCloudCluster_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws CloudException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void executeOnController(java.lang.String clusterId, java.lang.String script, Lang lang, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      executeOnController_call method_call = new executeOnController_call(clusterId, script, lang, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class executeOnController_call extends org.apache.thrift.async.TAsyncMethodCall<Response> {
      private java.lang.String clusterId;
      private java.lang.String script;
      private Lang lang;
      public executeOnController_call(java.lang.String clusterId, java.lang.String script, Lang lang, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.script = script;
        this.lang = lang;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("executeOnController", org.apache.thrift.protocol.TMessageType.CALL, 0));
        executeOnController_args args = new executeOnController_args();
        args.setClusterId(clusterId);
        args.setScript(script);
        args.setLang(lang);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_executeOnController();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("clean", new clean());
      processMap.put("exit", new exit());
      processMap.put("createCluster", new createCluster());
      processMap.put("createClusterKeepClusterName", new createClusterKeepClusterName());
      processMap.put("shutdownCluster", new shutdownCluster());
      processMap.put("terminateCluster", new terminateCluster());
      processMap.put("startMember", new startMember());
      processMap.put("shutdownMember", new shutdownMember());
      processMap.put("terminateMember", new terminateMember());
      processMap.put("suspendMember", new suspendMember());
      processMap.put("resumeMember", new resumeMember());
      processMap.put("createDockerCluster", new createDockerCluster());
      processMap.put("shutdownDockerCluster", new shutdownDockerCluster());
      processMap.put("startDockerMember", new startDockerMember());
      processMap.put("shutdownDockerMember", new shutdownDockerMember());
      processMap.put("splitClusterAs", new splitClusterAs());
      processMap.put("mergeCluster", new mergeCluster());
      processMap.put("loginToCloudUsingEnvironment", new loginToCloudUsingEnvironment());
      processMap.put("loginToCloud", new loginToCloud());
      processMap.put("createCloudCluster", new createCloudCluster());
      processMap.put("getCloudCluster", new getCloudCluster());
      processMap.put("stopCloudCluster", new stopCloudCluster());
      processMap.put("resumeCloudCluster", new resumeCloudCluster());
      processMap.put("deleteCloudCluster", new deleteCloudCluster());
      processMap.put("executeOnController", new executeOnController());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        result.success = iface.ping();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class clean<I extends Iface> extends org.apache.thrift.ProcessFunction<I, clean_args> {
      public clean() {
        super("clean");
      }

      public clean_args getEmptyArgsInstance() {
        return new clean_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public clean_result getResult(I iface, clean_args args) throws org.apache.thrift.TException {
        clean_result result = new clean_result();
        result.success = iface.clean();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class exit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, exit_args> {
      public exit() {
        super("exit");
      }

      public exit_args getEmptyArgsInstance() {
        return new exit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public exit_result getResult(I iface, exit_args args) throws org.apache.thrift.TException {
        exit_result result = new exit_result();
        result.success = iface.exit();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCluster_args> {
      public createCluster() {
        super("createCluster");
      }

      public createCluster_args getEmptyArgsInstance() {
        return new createCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createCluster_result getResult(I iface, createCluster_args args) throws org.apache.thrift.TException {
        createCluster_result result = new createCluster_result();
        try {
          result.success = iface.createCluster(args.hzVersion, args.xmlconfig);
        } catch (ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class createClusterKeepClusterName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createClusterKeepClusterName_args> {
      public createClusterKeepClusterName() {
        super("createClusterKeepClusterName");
      }

      public createClusterKeepClusterName_args getEmptyArgsInstance() {
        return new createClusterKeepClusterName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createClusterKeepClusterName_result getResult(I iface, createClusterKeepClusterName_args args) throws org.apache.thrift.TException {
        createClusterKeepClusterName_result result = new createClusterKeepClusterName_result();
        try {
          result.success = iface.createClusterKeepClusterName(args.hzVersion, args.xmlconfig);
        } catch (ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class shutdownCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdownCluster_args> {
      public shutdownCluster() {
        super("shutdownCluster");
      }

      public shutdownCluster_args getEmptyArgsInstance() {
        return new shutdownCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public shutdownCluster_result getResult(I iface, shutdownCluster_args args) throws org.apache.thrift.TException {
        shutdownCluster_result result = new shutdownCluster_result();
        result.success = iface.shutdownCluster(args.clusterId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class terminateCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateCluster_args> {
      public terminateCluster() {
        super("terminateCluster");
      }

      public terminateCluster_args getEmptyArgsInstance() {
        return new terminateCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public terminateCluster_result getResult(I iface, terminateCluster_args args) throws org.apache.thrift.TException {
        terminateCluster_result result = new terminateCluster_result();
        result.success = iface.terminateCluster(args.clusterId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class startMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startMember_args> {
      public startMember() {
        super("startMember");
      }

      public startMember_args getEmptyArgsInstance() {
        return new startMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public startMember_result getResult(I iface, startMember_args args) throws org.apache.thrift.TException {
        startMember_result result = new startMember_result();
        try {
          result.success = iface.startMember(args.clusterId);
        } catch (ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class shutdownMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdownMember_args> {
      public shutdownMember() {
        super("shutdownMember");
      }

      public shutdownMember_args getEmptyArgsInstance() {
        return new shutdownMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public shutdownMember_result getResult(I iface, shutdownMember_args args) throws org.apache.thrift.TException {
        shutdownMember_result result = new shutdownMember_result();
        result.success = iface.shutdownMember(args.clusterId, args.memberId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class terminateMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateMember_args> {
      public terminateMember() {
        super("terminateMember");
      }

      public terminateMember_args getEmptyArgsInstance() {
        return new terminateMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public terminateMember_result getResult(I iface, terminateMember_args args) throws org.apache.thrift.TException {
        terminateMember_result result = new terminateMember_result();
        result.success = iface.terminateMember(args.clusterId, args.memberId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class suspendMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, suspendMember_args> {
      public suspendMember() {
        super("suspendMember");
      }

      public suspendMember_args getEmptyArgsInstance() {
        return new suspendMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public suspendMember_result getResult(I iface, suspendMember_args args) throws org.apache.thrift.TException {
        suspendMember_result result = new suspendMember_result();
        result.success = iface.suspendMember(args.clusterId, args.memberId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class resumeMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeMember_args> {
      public resumeMember() {
        super("resumeMember");
      }

      public resumeMember_args getEmptyArgsInstance() {
        return new resumeMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public resumeMember_result getResult(I iface, resumeMember_args args) throws org.apache.thrift.TException {
        resumeMember_result result = new resumeMember_result();
        result.success = iface.resumeMember(args.clusterId, args.memberId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class createDockerCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createDockerCluster_args> {
      public createDockerCluster() {
        super("createDockerCluster");
      }

      public createDockerCluster_args getEmptyArgsInstance() {
        return new createDockerCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createDockerCluster_result getResult(I iface, createDockerCluster_args args) throws org.apache.thrift.TException {
        createDockerCluster_result result = new createDockerCluster_result();
        try {
          result.success = iface.createDockerCluster(args.dockerImageString, args.xmlconfigPath, args.hazelcastEnterpriseLicenseKey);
        } catch (ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class shutdownDockerCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdownDockerCluster_args> {
      public shutdownDockerCluster() {
        super("shutdownDockerCluster");
      }

      public shutdownDockerCluster_args getEmptyArgsInstance() {
        return new shutdownDockerCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public shutdownDockerCluster_result getResult(I iface, shutdownDockerCluster_args args) throws org.apache.thrift.TException {
        shutdownDockerCluster_result result = new shutdownDockerCluster_result();
        result.success = iface.shutdownDockerCluster(args.dockerClusterId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class startDockerMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startDockerMember_args> {
      public startDockerMember() {
        super("startDockerMember");
      }

      public startDockerMember_args getEmptyArgsInstance() {
        return new startDockerMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public startDockerMember_result getResult(I iface, startDockerMember_args args) throws org.apache.thrift.TException {
        startDockerMember_result result = new startDockerMember_result();
        try {
          result.success = iface.startDockerMember(args.dockerClusterId);
        } catch (ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class shutdownDockerMember<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdownDockerMember_args> {
      public shutdownDockerMember() {
        super("shutdownDockerMember");
      }

      public shutdownDockerMember_args getEmptyArgsInstance() {
        return new shutdownDockerMember_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public shutdownDockerMember_result getResult(I iface, shutdownDockerMember_args args) throws org.apache.thrift.TException {
        shutdownDockerMember_result result = new shutdownDockerMember_result();
        result.success = iface.shutdownDockerMember(args.dockerClusterId, args.containerId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class splitClusterAs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, splitClusterAs_args> {
      public splitClusterAs() {
        super("splitClusterAs");
      }

      public splitClusterAs_args getEmptyArgsInstance() {
        return new splitClusterAs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public splitClusterAs_result getResult(I iface, splitClusterAs_args args) throws org.apache.thrift.TException {
        splitClusterAs_result result = new splitClusterAs_result();
        result.success = iface.splitClusterAs(args.dockerClusterId, args.brain1, args.brain2);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class mergeCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mergeCluster_args> {
      public mergeCluster() {
        super("mergeCluster");
      }

      public mergeCluster_args getEmptyArgsInstance() {
        return new mergeCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public mergeCluster_result getResult(I iface, mergeCluster_args args) throws org.apache.thrift.TException {
        mergeCluster_result result = new mergeCluster_result();
        result.success = iface.mergeCluster(args.dockerClusterId);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class loginToCloudUsingEnvironment<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginToCloudUsingEnvironment_args> {
      public loginToCloudUsingEnvironment() {
        super("loginToCloudUsingEnvironment");
      }

      public loginToCloudUsingEnvironment_args getEmptyArgsInstance() {
        return new loginToCloudUsingEnvironment_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public loginToCloudUsingEnvironment_result getResult(I iface, loginToCloudUsingEnvironment_args args) throws org.apache.thrift.TException {
        loginToCloudUsingEnvironment_result result = new loginToCloudUsingEnvironment_result();
        try {
          iface.loginToCloudUsingEnvironment();
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class loginToCloud<I extends Iface> extends org.apache.thrift.ProcessFunction<I, loginToCloud_args> {
      public loginToCloud() {
        super("loginToCloud");
      }

      public loginToCloud_args getEmptyArgsInstance() {
        return new loginToCloud_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public loginToCloud_result getResult(I iface, loginToCloud_args args) throws org.apache.thrift.TException {
        loginToCloud_result result = new loginToCloud_result();
        try {
          iface.loginToCloud(args.baseUrl, args.apiKey, args.apiSecret);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class createCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createCloudCluster_args> {
      public createCloudCluster() {
        super("createCloudCluster");
      }

      public createCloudCluster_args getEmptyArgsInstance() {
        return new createCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public createCloudCluster_result getResult(I iface, createCloudCluster_args args) throws org.apache.thrift.TException {
        createCloudCluster_result result = new createCloudCluster_result();
        try {
          result.success = iface.createCloudCluster(args.hazelcastVersion, args.isTlsEnabled);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class getCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCloudCluster_args> {
      public getCloudCluster() {
        super("getCloudCluster");
      }

      public getCloudCluster_args getEmptyArgsInstance() {
        return new getCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public getCloudCluster_result getResult(I iface, getCloudCluster_args args) throws org.apache.thrift.TException {
        getCloudCluster_result result = new getCloudCluster_result();
        try {
          result.success = iface.getCloudCluster(args.cloudClusterId);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class stopCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stopCloudCluster_args> {
      public stopCloudCluster() {
        super("stopCloudCluster");
      }

      public stopCloudCluster_args getEmptyArgsInstance() {
        return new stopCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public stopCloudCluster_result getResult(I iface, stopCloudCluster_args args) throws org.apache.thrift.TException {
        stopCloudCluster_result result = new stopCloudCluster_result();
        try {
          result.success = iface.stopCloudCluster(args.cloudClusterId);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class resumeCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, resumeCloudCluster_args> {
      public resumeCloudCluster() {
        super("resumeCloudCluster");
      }

      public resumeCloudCluster_args getEmptyArgsInstance() {
        return new resumeCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public resumeCloudCluster_result getResult(I iface, resumeCloudCluster_args args) throws org.apache.thrift.TException {
        resumeCloudCluster_result result = new resumeCloudCluster_result();
        try {
          result.success = iface.resumeCloudCluster(args.cloudClusterId);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class deleteCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteCloudCluster_args> {
      public deleteCloudCluster() {
        super("deleteCloudCluster");
      }

      public deleteCloudCluster_args getEmptyArgsInstance() {
        return new deleteCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public deleteCloudCluster_result getResult(I iface, deleteCloudCluster_args args) throws org.apache.thrift.TException {
        deleteCloudCluster_result result = new deleteCloudCluster_result();
        try {
          iface.deleteCloudCluster(args.cloudClusterId);
        } catch (CloudException cloudException) {
          result.cloudException = cloudException;
        }
        return result;
      }
    }

    public static class executeOnController<I extends Iface> extends org.apache.thrift.ProcessFunction<I, executeOnController_args> {
      public executeOnController() {
        super("executeOnController");
      }

      public executeOnController_args getEmptyArgsInstance() {
        return new executeOnController_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public executeOnController_result getResult(I iface, executeOnController_args args) throws org.apache.thrift.TException {
        executeOnController_result result = new executeOnController_result();
        result.success = iface.executeOnController(args.clusterId, args.script, args.lang);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("clean", new clean());
      processMap.put("exit", new exit());
      processMap.put("createCluster", new createCluster());
      processMap.put("createClusterKeepClusterName", new createClusterKeepClusterName());
      processMap.put("shutdownCluster", new shutdownCluster());
      processMap.put("terminateCluster", new terminateCluster());
      processMap.put("startMember", new startMember());
      processMap.put("shutdownMember", new shutdownMember());
      processMap.put("terminateMember", new terminateMember());
      processMap.put("suspendMember", new suspendMember());
      processMap.put("resumeMember", new resumeMember());
      processMap.put("createDockerCluster", new createDockerCluster());
      processMap.put("shutdownDockerCluster", new shutdownDockerCluster());
      processMap.put("startDockerMember", new startDockerMember());
      processMap.put("shutdownDockerMember", new shutdownDockerMember());
      processMap.put("splitClusterAs", new splitClusterAs());
      processMap.put("mergeCluster", new mergeCluster());
      processMap.put("loginToCloudUsingEnvironment", new loginToCloudUsingEnvironment());
      processMap.put("loginToCloud", new loginToCloud());
      processMap.put("createCloudCluster", new createCloudCluster());
      processMap.put("getCloudCluster", new getCloudCluster());
      processMap.put("stopCloudCluster", new stopCloudCluster());
      processMap.put("resumeCloudCluster", new resumeCloudCluster());
      processMap.put("deleteCloudCluster", new deleteCloudCluster());
      processMap.put("executeOnController", new executeOnController());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, java.lang.Boolean> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ping_result result = new ping_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class clean<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, clean_args, java.lang.Boolean> {
      public clean() {
        super("clean");
      }

      public clean_args getEmptyArgsInstance() {
        return new clean_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            clean_result result = new clean_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            clean_result result = new clean_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, clean_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.clean(resultHandler);
      }
    }

    public static class exit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, exit_args, java.lang.Boolean> {
      public exit() {
        super("exit");
      }

      public exit_args getEmptyArgsInstance() {
        return new exit_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            exit_result result = new exit_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            exit_result result = new exit_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, exit_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.exit(resultHandler);
      }
    }

    public static class createCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCluster_args, Cluster> {
      public createCluster() {
        super("createCluster");
      }

      public createCluster_args getEmptyArgsInstance() {
        return new createCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Cluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Cluster>() { 
          public void onComplete(Cluster o) {
            createCluster_result result = new createCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createCluster_result result = new createCluster_result();
            if (e instanceof ServerException) {
              result.serverException = (ServerException) e;
              result.setServerExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCluster_args args, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException {
        iface.createCluster(args.hzVersion, args.xmlconfig,resultHandler);
      }
    }

    public static class createClusterKeepClusterName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createClusterKeepClusterName_args, Cluster> {
      public createClusterKeepClusterName() {
        super("createClusterKeepClusterName");
      }

      public createClusterKeepClusterName_args getEmptyArgsInstance() {
        return new createClusterKeepClusterName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Cluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Cluster>() { 
          public void onComplete(Cluster o) {
            createClusterKeepClusterName_result result = new createClusterKeepClusterName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createClusterKeepClusterName_result result = new createClusterKeepClusterName_result();
            if (e instanceof ServerException) {
              result.serverException = (ServerException) e;
              result.setServerExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createClusterKeepClusterName_args args, org.apache.thrift.async.AsyncMethodCallback<Cluster> resultHandler) throws org.apache.thrift.TException {
        iface.createClusterKeepClusterName(args.hzVersion, args.xmlconfig,resultHandler);
      }
    }

    public static class shutdownCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdownCluster_args, java.lang.Boolean> {
      public shutdownCluster() {
        super("shutdownCluster");
      }

      public shutdownCluster_args getEmptyArgsInstance() {
        return new shutdownCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            shutdownCluster_result result = new shutdownCluster_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdownCluster_result result = new shutdownCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdownCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.shutdownCluster(args.clusterId,resultHandler);
      }
    }

    public static class terminateCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateCluster_args, java.lang.Boolean> {
      public terminateCluster() {
        super("terminateCluster");
      }

      public terminateCluster_args getEmptyArgsInstance() {
        return new terminateCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            terminateCluster_result result = new terminateCluster_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminateCluster_result result = new terminateCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.terminateCluster(args.clusterId,resultHandler);
      }
    }

    public static class startMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startMember_args, Member> {
      public startMember() {
        super("startMember");
      }

      public startMember_args getEmptyArgsInstance() {
        return new startMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Member> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Member>() { 
          public void onComplete(Member o) {
            startMember_result result = new startMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            startMember_result result = new startMember_result();
            if (e instanceof ServerException) {
              result.serverException = (ServerException) e;
              result.setServerExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startMember_args args, org.apache.thrift.async.AsyncMethodCallback<Member> resultHandler) throws org.apache.thrift.TException {
        iface.startMember(args.clusterId,resultHandler);
      }
    }

    public static class shutdownMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdownMember_args, java.lang.Boolean> {
      public shutdownMember() {
        super("shutdownMember");
      }

      public shutdownMember_args getEmptyArgsInstance() {
        return new shutdownMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            shutdownMember_result result = new shutdownMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdownMember_result result = new shutdownMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdownMember_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.shutdownMember(args.clusterId, args.memberId,resultHandler);
      }
    }

    public static class terminateMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateMember_args, java.lang.Boolean> {
      public terminateMember() {
        super("terminateMember");
      }

      public terminateMember_args getEmptyArgsInstance() {
        return new terminateMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            terminateMember_result result = new terminateMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminateMember_result result = new terminateMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateMember_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.terminateMember(args.clusterId, args.memberId,resultHandler);
      }
    }

    public static class suspendMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, suspendMember_args, java.lang.Boolean> {
      public suspendMember() {
        super("suspendMember");
      }

      public suspendMember_args getEmptyArgsInstance() {
        return new suspendMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            suspendMember_result result = new suspendMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            suspendMember_result result = new suspendMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, suspendMember_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.suspendMember(args.clusterId, args.memberId,resultHandler);
      }
    }

    public static class resumeMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resumeMember_args, java.lang.Boolean> {
      public resumeMember() {
        super("resumeMember");
      }

      public resumeMember_args getEmptyArgsInstance() {
        return new resumeMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            resumeMember_result result = new resumeMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            resumeMember_result result = new resumeMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resumeMember_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.resumeMember(args.clusterId, args.memberId,resultHandler);
      }
    }

    public static class createDockerCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createDockerCluster_args, DockerCluster> {
      public createDockerCluster() {
        super("createDockerCluster");
      }

      public createDockerCluster_args getEmptyArgsInstance() {
        return new createDockerCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DockerCluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DockerCluster>() { 
          public void onComplete(DockerCluster o) {
            createDockerCluster_result result = new createDockerCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createDockerCluster_result result = new createDockerCluster_result();
            if (e instanceof ServerException) {
              result.serverException = (ServerException) e;
              result.setServerExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createDockerCluster_args args, org.apache.thrift.async.AsyncMethodCallback<DockerCluster> resultHandler) throws org.apache.thrift.TException {
        iface.createDockerCluster(args.dockerImageString, args.xmlconfigPath, args.hazelcastEnterpriseLicenseKey,resultHandler);
      }
    }

    public static class shutdownDockerCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdownDockerCluster_args, java.lang.Boolean> {
      public shutdownDockerCluster() {
        super("shutdownDockerCluster");
      }

      public shutdownDockerCluster_args getEmptyArgsInstance() {
        return new shutdownDockerCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            shutdownDockerCluster_result result = new shutdownDockerCluster_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdownDockerCluster_result result = new shutdownDockerCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdownDockerCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.shutdownDockerCluster(args.dockerClusterId,resultHandler);
      }
    }

    public static class startDockerMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startDockerMember_args, DockerMember> {
      public startDockerMember() {
        super("startDockerMember");
      }

      public startDockerMember_args getEmptyArgsInstance() {
        return new startDockerMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<DockerMember> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<DockerMember>() { 
          public void onComplete(DockerMember o) {
            startDockerMember_result result = new startDockerMember_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            startDockerMember_result result = new startDockerMember_result();
            if (e instanceof ServerException) {
              result.serverException = (ServerException) e;
              result.setServerExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startDockerMember_args args, org.apache.thrift.async.AsyncMethodCallback<DockerMember> resultHandler) throws org.apache.thrift.TException {
        iface.startDockerMember(args.dockerClusterId,resultHandler);
      }
    }

    public static class shutdownDockerMember<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdownDockerMember_args, java.lang.Boolean> {
      public shutdownDockerMember() {
        super("shutdownDockerMember");
      }

      public shutdownDockerMember_args getEmptyArgsInstance() {
        return new shutdownDockerMember_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            shutdownDockerMember_result result = new shutdownDockerMember_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdownDockerMember_result result = new shutdownDockerMember_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdownDockerMember_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.shutdownDockerMember(args.dockerClusterId, args.containerId,resultHandler);
      }
    }

    public static class splitClusterAs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, splitClusterAs_args, java.lang.Boolean> {
      public splitClusterAs() {
        super("splitClusterAs");
      }

      public splitClusterAs_args getEmptyArgsInstance() {
        return new splitClusterAs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            splitClusterAs_result result = new splitClusterAs_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            splitClusterAs_result result = new splitClusterAs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, splitClusterAs_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.splitClusterAs(args.dockerClusterId, args.brain1, args.brain2,resultHandler);
      }
    }

    public static class mergeCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mergeCluster_args, java.lang.Boolean> {
      public mergeCluster() {
        super("mergeCluster");
      }

      public mergeCluster_args getEmptyArgsInstance() {
        return new mergeCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            mergeCluster_result result = new mergeCluster_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mergeCluster_result result = new mergeCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mergeCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.mergeCluster(args.dockerClusterId,resultHandler);
      }
    }

    public static class loginToCloudUsingEnvironment<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginToCloudUsingEnvironment_args, Void> {
      public loginToCloudUsingEnvironment() {
        super("loginToCloudUsingEnvironment");
      }

      public loginToCloudUsingEnvironment_args getEmptyArgsInstance() {
        return new loginToCloudUsingEnvironment_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            loginToCloudUsingEnvironment_result result = new loginToCloudUsingEnvironment_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginToCloudUsingEnvironment_result result = new loginToCloudUsingEnvironment_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginToCloudUsingEnvironment_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.loginToCloudUsingEnvironment(resultHandler);
      }
    }

    public static class loginToCloud<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, loginToCloud_args, Void> {
      public loginToCloud() {
        super("loginToCloud");
      }

      public loginToCloud_args getEmptyArgsInstance() {
        return new loginToCloud_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            loginToCloud_result result = new loginToCloud_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            loginToCloud_result result = new loginToCloud_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, loginToCloud_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.loginToCloud(args.baseUrl, args.apiKey, args.apiSecret,resultHandler);
      }
    }

    public static class createCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createCloudCluster_args, CloudCluster> {
      public createCloudCluster() {
        super("createCloudCluster");
      }

      public createCloudCluster_args getEmptyArgsInstance() {
        return new createCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CloudCluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CloudCluster>() { 
          public void onComplete(CloudCluster o) {
            createCloudCluster_result result = new createCloudCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createCloudCluster_result result = new createCloudCluster_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
        iface.createCloudCluster(args.hazelcastVersion, args.isTlsEnabled,resultHandler);
      }
    }

    public static class getCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCloudCluster_args, CloudCluster> {
      public getCloudCluster() {
        super("getCloudCluster");
      }

      public getCloudCluster_args getEmptyArgsInstance() {
        return new getCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CloudCluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CloudCluster>() { 
          public void onComplete(CloudCluster o) {
            getCloudCluster_result result = new getCloudCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCloudCluster_result result = new getCloudCluster_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
        iface.getCloudCluster(args.cloudClusterId,resultHandler);
      }
    }

    public static class stopCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stopCloudCluster_args, CloudCluster> {
      public stopCloudCluster() {
        super("stopCloudCluster");
      }

      public stopCloudCluster_args getEmptyArgsInstance() {
        return new stopCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CloudCluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CloudCluster>() { 
          public void onComplete(CloudCluster o) {
            stopCloudCluster_result result = new stopCloudCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            stopCloudCluster_result result = new stopCloudCluster_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stopCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
        iface.stopCloudCluster(args.cloudClusterId,resultHandler);
      }
    }

    public static class resumeCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, resumeCloudCluster_args, CloudCluster> {
      public resumeCloudCluster() {
        super("resumeCloudCluster");
      }

      public resumeCloudCluster_args getEmptyArgsInstance() {
        return new resumeCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<CloudCluster> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<CloudCluster>() { 
          public void onComplete(CloudCluster o) {
            resumeCloudCluster_result result = new resumeCloudCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            resumeCloudCluster_result result = new resumeCloudCluster_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, resumeCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<CloudCluster> resultHandler) throws org.apache.thrift.TException {
        iface.resumeCloudCluster(args.cloudClusterId,resultHandler);
      }
    }

    public static class deleteCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteCloudCluster_args, Void> {
      public deleteCloudCluster() {
        super("deleteCloudCluster");
      }

      public deleteCloudCluster_args getEmptyArgsInstance() {
        return new deleteCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            deleteCloudCluster_result result = new deleteCloudCluster_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteCloudCluster_result result = new deleteCloudCluster_result();
            if (e instanceof CloudException) {
              result.cloudException = (CloudException) e;
              result.setCloudExceptionIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.deleteCloudCluster(args.cloudClusterId,resultHandler);
      }
    }

    public static class executeOnController<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, executeOnController_args, Response> {
      public executeOnController() {
        super("executeOnController");
      }

      public executeOnController_args getEmptyArgsInstance() {
        return new executeOnController_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Response> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            executeOnController_result result = new executeOnController_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            executeOnController_result result = new executeOnController_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, executeOnController_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws org.apache.thrift.TException {
        iface.executeOnController(args.clusterId, args.script, args.lang,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ping_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class clean_args implements org.apache.thrift.TBase<clean_args, clean_args._Fields>, java.io.Serializable, Cloneable, Comparable<clean_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clean_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clean_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clean_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clean_args.class, metaDataMap);
    }

    public clean_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clean_args(clean_args other) {
    }

    public clean_args deepCopy() {
      return new clean_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof clean_args)
        return this.equals((clean_args)that);
      return false;
    }

    public boolean equals(clean_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(clean_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("clean_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clean_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clean_argsStandardScheme getScheme() {
        return new clean_argsStandardScheme();
      }
    }

    private static class clean_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<clean_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clean_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clean_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clean_argsTupleScheme getScheme() {
        return new clean_argsTupleScheme();
      }
    }

    private static class clean_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<clean_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clean_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class clean_result implements org.apache.thrift.TBase<clean_result, clean_result._Fields>, java.io.Serializable, Cloneable, Comparable<clean_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("clean_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new clean_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new clean_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(clean_result.class, metaDataMap);
    }

    public clean_result() {
    }

    public clean_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public clean_result(clean_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public clean_result deepCopy() {
      return new clean_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public clean_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof clean_result)
        return this.equals((clean_result)that);
      return false;
    }

    public boolean equals(clean_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(clean_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("clean_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class clean_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clean_resultStandardScheme getScheme() {
        return new clean_resultStandardScheme();
      }
    }

    private static class clean_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<clean_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, clean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, clean_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class clean_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public clean_resultTupleScheme getScheme() {
        return new clean_resultTupleScheme();
      }
    }

    private static class clean_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<clean_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, clean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, clean_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exit_args implements org.apache.thrift.TBase<exit_args, exit_args._Fields>, java.io.Serializable, Cloneable, Comparable<exit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exit_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exit_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exit_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exit_args.class, metaDataMap);
    }

    public exit_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exit_args(exit_args other) {
    }

    public exit_args deepCopy() {
      return new exit_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exit_args)
        return this.equals((exit_args)that);
      return false;
    }

    public boolean equals(exit_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(exit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exit_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exit_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exit_argsStandardScheme getScheme() {
        return new exit_argsStandardScheme();
      }
    }

    private static class exit_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<exit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exit_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exit_argsTupleScheme getScheme() {
        return new exit_argsTupleScheme();
      }
    }

    private static class exit_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<exit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class exit_result implements org.apache.thrift.TBase<exit_result, exit_result._Fields>, java.io.Serializable, Cloneable, Comparable<exit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("exit_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new exit_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new exit_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(exit_result.class, metaDataMap);
    }

    public exit_result() {
    }

    public exit_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public exit_result(exit_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public exit_result deepCopy() {
      return new exit_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public exit_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof exit_result)
        return this.equals((exit_result)that);
      return false;
    }

    public boolean equals(exit_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(exit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("exit_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class exit_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exit_resultStandardScheme getScheme() {
        return new exit_resultStandardScheme();
      }
    }

    private static class exit_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<exit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, exit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, exit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class exit_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public exit_resultTupleScheme getScheme() {
        return new exit_resultTupleScheme();
      }
    }

    private static class exit_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<exit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, exit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, exit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCluster_args implements org.apache.thrift.TBase<createCluster_args, createCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCluster_args");

    private static final org.apache.thrift.protocol.TField HZ_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hzVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XMLCONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlconfig", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String hzVersion; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String xmlconfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HZ_VERSION((short)1, "hzVersion"),
      XMLCONFIG((short)2, "xmlconfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HZ_VERSION
            return HZ_VERSION;
          case 2: // XMLCONFIG
            return XMLCONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HZ_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hzVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XMLCONFIG, new org.apache.thrift.meta_data.FieldMetaData("xmlconfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCluster_args.class, metaDataMap);
    }

    public createCluster_args() {
    }

    public createCluster_args(
      java.lang.String hzVersion,
      java.lang.String xmlconfig)
    {
      this();
      this.hzVersion = hzVersion;
      this.xmlconfig = xmlconfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCluster_args(createCluster_args other) {
      if (other.isSetHzVersion()) {
        this.hzVersion = other.hzVersion;
      }
      if (other.isSetXmlconfig()) {
        this.xmlconfig = other.xmlconfig;
      }
    }

    public createCluster_args deepCopy() {
      return new createCluster_args(this);
    }

    @Override
    public void clear() {
      this.hzVersion = null;
      this.xmlconfig = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHzVersion() {
      return this.hzVersion;
    }

    public createCluster_args setHzVersion(@org.apache.thrift.annotation.Nullable java.lang.String hzVersion) {
      this.hzVersion = hzVersion;
      return this;
    }

    public void unsetHzVersion() {
      this.hzVersion = null;
    }

    /** Returns true if field hzVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetHzVersion() {
      return this.hzVersion != null;
    }

    public void setHzVersionIsSet(boolean value) {
      if (!value) {
        this.hzVersion = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getXmlconfig() {
      return this.xmlconfig;
    }

    public createCluster_args setXmlconfig(@org.apache.thrift.annotation.Nullable java.lang.String xmlconfig) {
      this.xmlconfig = xmlconfig;
      return this;
    }

    public void unsetXmlconfig() {
      this.xmlconfig = null;
    }

    /** Returns true if field xmlconfig is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlconfig() {
      return this.xmlconfig != null;
    }

    public void setXmlconfigIsSet(boolean value) {
      if (!value) {
        this.xmlconfig = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HZ_VERSION:
        if (value == null) {
          unsetHzVersion();
        } else {
          setHzVersion((java.lang.String)value);
        }
        break;

      case XMLCONFIG:
        if (value == null) {
          unsetXmlconfig();
        } else {
          setXmlconfig((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HZ_VERSION:
        return getHzVersion();

      case XMLCONFIG:
        return getXmlconfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HZ_VERSION:
        return isSetHzVersion();
      case XMLCONFIG:
        return isSetXmlconfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createCluster_args)
        return this.equals((createCluster_args)that);
      return false;
    }

    public boolean equals(createCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hzVersion = true && this.isSetHzVersion();
      boolean that_present_hzVersion = true && that.isSetHzVersion();
      if (this_present_hzVersion || that_present_hzVersion) {
        if (!(this_present_hzVersion && that_present_hzVersion))
          return false;
        if (!this.hzVersion.equals(that.hzVersion))
          return false;
      }

      boolean this_present_xmlconfig = true && this.isSetXmlconfig();
      boolean that_present_xmlconfig = true && that.isSetXmlconfig();
      if (this_present_xmlconfig || that_present_xmlconfig) {
        if (!(this_present_xmlconfig && that_present_xmlconfig))
          return false;
        if (!this.xmlconfig.equals(that.xmlconfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHzVersion()) ? 131071 : 524287);
      if (isSetHzVersion())
        hashCode = hashCode * 8191 + hzVersion.hashCode();

      hashCode = hashCode * 8191 + ((isSetXmlconfig()) ? 131071 : 524287);
      if (isSetXmlconfig())
        hashCode = hashCode * 8191 + xmlconfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHzVersion(), other.isSetHzVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHzVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hzVersion, other.hzVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetXmlconfig(), other.isSetXmlconfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlconfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlconfig, other.xmlconfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCluster_args(");
      boolean first = true;

      sb.append("hzVersion:");
      if (this.hzVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.hzVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xmlconfig:");
      if (this.xmlconfig == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlconfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCluster_argsStandardScheme getScheme() {
        return new createCluster_argsStandardScheme();
      }
    }

    private static class createCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HZ_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hzVersion = iprot.readString();
                struct.setHzVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XMLCONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlconfig = iprot.readString();
                struct.setXmlconfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hzVersion != null) {
          oprot.writeFieldBegin(HZ_VERSION_FIELD_DESC);
          oprot.writeString(struct.hzVersion);
          oprot.writeFieldEnd();
        }
        if (struct.xmlconfig != null) {
          oprot.writeFieldBegin(XMLCONFIG_FIELD_DESC);
          oprot.writeString(struct.xmlconfig);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCluster_argsTupleScheme getScheme() {
        return new createCluster_argsTupleScheme();
      }
    }

    private static class createCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHzVersion()) {
          optionals.set(0);
        }
        if (struct.isSetXmlconfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHzVersion()) {
          oprot.writeString(struct.hzVersion);
        }
        if (struct.isSetXmlconfig()) {
          oprot.writeString(struct.xmlconfig);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hzVersion = iprot.readString();
          struct.setHzVersionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.xmlconfig = iprot.readString();
          struct.setXmlconfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCluster_result implements org.apache.thrift.TBase<createCluster_result, createCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Cluster success; // required
    public @org.apache.thrift.annotation.Nullable ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVER_EXCEPTION((short)1, "serverException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cluster.class)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCluster_result.class, metaDataMap);
    }

    public createCluster_result() {
    }

    public createCluster_result(
      Cluster success,
      ServerException serverException)
    {
      this();
      this.success = success;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCluster_result(createCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cluster(other.success);
      }
      if (other.isSetServerException()) {
        this.serverException = new ServerException(other.serverException);
      }
    }

    public createCluster_result deepCopy() {
      return new createCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.serverException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Cluster getSuccess() {
      return this.success;
    }

    public createCluster_result setSuccess(@org.apache.thrift.annotation.Nullable Cluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ServerException getServerException() {
      return this.serverException;
    }

    public createCluster_result setServerException(@org.apache.thrift.annotation.Nullable ServerException serverException) {
      this.serverException = serverException;
      return this;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cluster)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((ServerException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createCluster_result)
        return this.equals((createCluster_result)that);
      return false;
    }

    public boolean equals(createCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetServerException()) ? 131071 : 524287);
      if (isSetServerException())
        hashCode = hashCode * 8191 + serverException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetServerException(), other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCluster_resultStandardScheme getScheme() {
        return new createCluster_resultStandardScheme();
      }
    }

    private static class createCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCluster_resultTupleScheme getScheme() {
        return new createCluster_resultTupleScheme();
      }
    }

    private static class createCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServerException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Cluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverException = new ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClusterKeepClusterName_args implements org.apache.thrift.TBase<createClusterKeepClusterName_args, createClusterKeepClusterName_args._Fields>, java.io.Serializable, Cloneable, Comparable<createClusterKeepClusterName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClusterKeepClusterName_args");

    private static final org.apache.thrift.protocol.TField HZ_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hzVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XMLCONFIG_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlconfig", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClusterKeepClusterName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClusterKeepClusterName_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String hzVersion; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String xmlconfig; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HZ_VERSION((short)1, "hzVersion"),
      XMLCONFIG((short)2, "xmlconfig");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HZ_VERSION
            return HZ_VERSION;
          case 2: // XMLCONFIG
            return XMLCONFIG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HZ_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hzVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XMLCONFIG, new org.apache.thrift.meta_data.FieldMetaData("xmlconfig", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClusterKeepClusterName_args.class, metaDataMap);
    }

    public createClusterKeepClusterName_args() {
    }

    public createClusterKeepClusterName_args(
      java.lang.String hzVersion,
      java.lang.String xmlconfig)
    {
      this();
      this.hzVersion = hzVersion;
      this.xmlconfig = xmlconfig;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClusterKeepClusterName_args(createClusterKeepClusterName_args other) {
      if (other.isSetHzVersion()) {
        this.hzVersion = other.hzVersion;
      }
      if (other.isSetXmlconfig()) {
        this.xmlconfig = other.xmlconfig;
      }
    }

    public createClusterKeepClusterName_args deepCopy() {
      return new createClusterKeepClusterName_args(this);
    }

    @Override
    public void clear() {
      this.hzVersion = null;
      this.xmlconfig = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHzVersion() {
      return this.hzVersion;
    }

    public createClusterKeepClusterName_args setHzVersion(@org.apache.thrift.annotation.Nullable java.lang.String hzVersion) {
      this.hzVersion = hzVersion;
      return this;
    }

    public void unsetHzVersion() {
      this.hzVersion = null;
    }

    /** Returns true if field hzVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetHzVersion() {
      return this.hzVersion != null;
    }

    public void setHzVersionIsSet(boolean value) {
      if (!value) {
        this.hzVersion = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getXmlconfig() {
      return this.xmlconfig;
    }

    public createClusterKeepClusterName_args setXmlconfig(@org.apache.thrift.annotation.Nullable java.lang.String xmlconfig) {
      this.xmlconfig = xmlconfig;
      return this;
    }

    public void unsetXmlconfig() {
      this.xmlconfig = null;
    }

    /** Returns true if field xmlconfig is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlconfig() {
      return this.xmlconfig != null;
    }

    public void setXmlconfigIsSet(boolean value) {
      if (!value) {
        this.xmlconfig = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HZ_VERSION:
        if (value == null) {
          unsetHzVersion();
        } else {
          setHzVersion((java.lang.String)value);
        }
        break;

      case XMLCONFIG:
        if (value == null) {
          unsetXmlconfig();
        } else {
          setXmlconfig((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HZ_VERSION:
        return getHzVersion();

      case XMLCONFIG:
        return getXmlconfig();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HZ_VERSION:
        return isSetHzVersion();
      case XMLCONFIG:
        return isSetXmlconfig();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createClusterKeepClusterName_args)
        return this.equals((createClusterKeepClusterName_args)that);
      return false;
    }

    public boolean equals(createClusterKeepClusterName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hzVersion = true && this.isSetHzVersion();
      boolean that_present_hzVersion = true && that.isSetHzVersion();
      if (this_present_hzVersion || that_present_hzVersion) {
        if (!(this_present_hzVersion && that_present_hzVersion))
          return false;
        if (!this.hzVersion.equals(that.hzVersion))
          return false;
      }

      boolean this_present_xmlconfig = true && this.isSetXmlconfig();
      boolean that_present_xmlconfig = true && that.isSetXmlconfig();
      if (this_present_xmlconfig || that_present_xmlconfig) {
        if (!(this_present_xmlconfig && that_present_xmlconfig))
          return false;
        if (!this.xmlconfig.equals(that.xmlconfig))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHzVersion()) ? 131071 : 524287);
      if (isSetHzVersion())
        hashCode = hashCode * 8191 + hzVersion.hashCode();

      hashCode = hashCode * 8191 + ((isSetXmlconfig()) ? 131071 : 524287);
      if (isSetXmlconfig())
        hashCode = hashCode * 8191 + xmlconfig.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createClusterKeepClusterName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHzVersion(), other.isSetHzVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHzVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hzVersion, other.hzVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetXmlconfig(), other.isSetXmlconfig());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlconfig()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlconfig, other.xmlconfig);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClusterKeepClusterName_args(");
      boolean first = true;

      sb.append("hzVersion:");
      if (this.hzVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.hzVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xmlconfig:");
      if (this.xmlconfig == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlconfig);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClusterKeepClusterName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClusterKeepClusterName_argsStandardScheme getScheme() {
        return new createClusterKeepClusterName_argsStandardScheme();
      }
    }

    private static class createClusterKeepClusterName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClusterKeepClusterName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClusterKeepClusterName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HZ_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hzVersion = iprot.readString();
                struct.setHzVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XMLCONFIG
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlconfig = iprot.readString();
                struct.setXmlconfigIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClusterKeepClusterName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hzVersion != null) {
          oprot.writeFieldBegin(HZ_VERSION_FIELD_DESC);
          oprot.writeString(struct.hzVersion);
          oprot.writeFieldEnd();
        }
        if (struct.xmlconfig != null) {
          oprot.writeFieldBegin(XMLCONFIG_FIELD_DESC);
          oprot.writeString(struct.xmlconfig);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClusterKeepClusterName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClusterKeepClusterName_argsTupleScheme getScheme() {
        return new createClusterKeepClusterName_argsTupleScheme();
      }
    }

    private static class createClusterKeepClusterName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClusterKeepClusterName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClusterKeepClusterName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHzVersion()) {
          optionals.set(0);
        }
        if (struct.isSetXmlconfig()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHzVersion()) {
          oprot.writeString(struct.hzVersion);
        }
        if (struct.isSetXmlconfig()) {
          oprot.writeString(struct.xmlconfig);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClusterKeepClusterName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hzVersion = iprot.readString();
          struct.setHzVersionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.xmlconfig = iprot.readString();
          struct.setXmlconfigIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClusterKeepClusterName_result implements org.apache.thrift.TBase<createClusterKeepClusterName_result, createClusterKeepClusterName_result._Fields>, java.io.Serializable, Cloneable, Comparable<createClusterKeepClusterName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClusterKeepClusterName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClusterKeepClusterName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClusterKeepClusterName_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Cluster success; // required
    public @org.apache.thrift.annotation.Nullable ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVER_EXCEPTION((short)1, "serverException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Cluster.class)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClusterKeepClusterName_result.class, metaDataMap);
    }

    public createClusterKeepClusterName_result() {
    }

    public createClusterKeepClusterName_result(
      Cluster success,
      ServerException serverException)
    {
      this();
      this.success = success;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClusterKeepClusterName_result(createClusterKeepClusterName_result other) {
      if (other.isSetSuccess()) {
        this.success = new Cluster(other.success);
      }
      if (other.isSetServerException()) {
        this.serverException = new ServerException(other.serverException);
      }
    }

    public createClusterKeepClusterName_result deepCopy() {
      return new createClusterKeepClusterName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.serverException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Cluster getSuccess() {
      return this.success;
    }

    public createClusterKeepClusterName_result setSuccess(@org.apache.thrift.annotation.Nullable Cluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ServerException getServerException() {
      return this.serverException;
    }

    public createClusterKeepClusterName_result setServerException(@org.apache.thrift.annotation.Nullable ServerException serverException) {
      this.serverException = serverException;
      return this;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Cluster)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((ServerException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createClusterKeepClusterName_result)
        return this.equals((createClusterKeepClusterName_result)that);
      return false;
    }

    public boolean equals(createClusterKeepClusterName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetServerException()) ? 131071 : 524287);
      if (isSetServerException())
        hashCode = hashCode * 8191 + serverException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createClusterKeepClusterName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetServerException(), other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClusterKeepClusterName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClusterKeepClusterName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClusterKeepClusterName_resultStandardScheme getScheme() {
        return new createClusterKeepClusterName_resultStandardScheme();
      }
    }

    private static class createClusterKeepClusterName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClusterKeepClusterName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClusterKeepClusterName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Cluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClusterKeepClusterName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClusterKeepClusterName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClusterKeepClusterName_resultTupleScheme getScheme() {
        return new createClusterKeepClusterName_resultTupleScheme();
      }
    }

    private static class createClusterKeepClusterName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClusterKeepClusterName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClusterKeepClusterName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServerException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClusterKeepClusterName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Cluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverException = new ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownCluster_args implements org.apache.thrift.TBase<shutdownCluster_args, shutdownCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownCluster_args.class, metaDataMap);
    }

    public shutdownCluster_args() {
    }

    public shutdownCluster_args(
      java.lang.String clusterId)
    {
      this();
      this.clusterId = clusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownCluster_args(shutdownCluster_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
    }

    public shutdownCluster_args deepCopy() {
      return new shutdownCluster_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public shutdownCluster_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownCluster_args)
        return this.equals((shutdownCluster_args)that);
      return false;
    }

    public boolean equals(shutdownCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownCluster_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCluster_argsStandardScheme getScheme() {
        return new shutdownCluster_argsStandardScheme();
      }
    }

    private static class shutdownCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCluster_argsTupleScheme getScheme() {
        return new shutdownCluster_argsTupleScheme();
      }
    }

    private static class shutdownCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownCluster_result implements org.apache.thrift.TBase<shutdownCluster_result, shutdownCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownCluster_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownCluster_result.class, metaDataMap);
    }

    public shutdownCluster_result() {
    }

    public shutdownCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownCluster_result(shutdownCluster_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public shutdownCluster_result deepCopy() {
      return new shutdownCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public shutdownCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownCluster_result)
        return this.equals((shutdownCluster_result)that);
      return false;
    }

    public boolean equals(shutdownCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(shutdownCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCluster_resultStandardScheme getScheme() {
        return new shutdownCluster_resultStandardScheme();
      }
    }

    private static class shutdownCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCluster_resultTupleScheme getScheme() {
        return new shutdownCluster_resultTupleScheme();
      }
    }

    private static class shutdownCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateCluster_args implements org.apache.thrift.TBase<terminateCluster_args, terminateCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateCluster_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateCluster_args.class, metaDataMap);
    }

    public terminateCluster_args() {
    }

    public terminateCluster_args(
      java.lang.String clusterId)
    {
      this();
      this.clusterId = clusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateCluster_args(terminateCluster_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
    }

    public terminateCluster_args deepCopy() {
      return new terminateCluster_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public terminateCluster_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof terminateCluster_args)
        return this.equals((terminateCluster_args)that);
      return false;
    }

    public boolean equals(terminateCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateCluster_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateCluster_argsStandardScheme getScheme() {
        return new terminateCluster_argsStandardScheme();
      }
    }

    private static class terminateCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateCluster_argsTupleScheme getScheme() {
        return new terminateCluster_argsTupleScheme();
      }
    }

    private static class terminateCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateCluster_result implements org.apache.thrift.TBase<terminateCluster_result, terminateCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateCluster_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateCluster_result.class, metaDataMap);
    }

    public terminateCluster_result() {
    }

    public terminateCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateCluster_result(terminateCluster_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public terminateCluster_result deepCopy() {
      return new terminateCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public terminateCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof terminateCluster_result)
        return this.equals((terminateCluster_result)that);
      return false;
    }

    public boolean equals(terminateCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(terminateCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateCluster_resultStandardScheme getScheme() {
        return new terminateCluster_resultStandardScheme();
      }
    }

    private static class terminateCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateCluster_resultTupleScheme getScheme() {
        return new terminateCluster_resultTupleScheme();
      }
    }

    private static class terminateCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startMember_args implements org.apache.thrift.TBase<startMember_args, startMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<startMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMember_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMember_args.class, metaDataMap);
    }

    public startMember_args() {
    }

    public startMember_args(
      java.lang.String clusterId)
    {
      this();
      this.clusterId = clusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startMember_args(startMember_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
    }

    public startMember_args deepCopy() {
      return new startMember_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public startMember_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof startMember_args)
        return this.equals((startMember_args)that);
      return false;
    }

    public boolean equals(startMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startMember_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startMember_argsStandardScheme getScheme() {
        return new startMember_argsStandardScheme();
      }
    }

    private static class startMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<startMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startMember_argsTupleScheme getScheme() {
        return new startMember_argsTupleScheme();
      }
    }

    private static class startMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<startMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startMember_result implements org.apache.thrift.TBase<startMember_result, startMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<startMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Member success; // required
    public @org.apache.thrift.annotation.Nullable ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVER_EXCEPTION((short)1, "serverException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Member.class)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMember_result.class, metaDataMap);
    }

    public startMember_result() {
    }

    public startMember_result(
      Member success,
      ServerException serverException)
    {
      this();
      this.success = success;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startMember_result(startMember_result other) {
      if (other.isSetSuccess()) {
        this.success = new Member(other.success);
      }
      if (other.isSetServerException()) {
        this.serverException = new ServerException(other.serverException);
      }
    }

    public startMember_result deepCopy() {
      return new startMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.serverException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Member getSuccess() {
      return this.success;
    }

    public startMember_result setSuccess(@org.apache.thrift.annotation.Nullable Member success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ServerException getServerException() {
      return this.serverException;
    }

    public startMember_result setServerException(@org.apache.thrift.annotation.Nullable ServerException serverException) {
      this.serverException = serverException;
      return this;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Member)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((ServerException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof startMember_result)
        return this.equals((startMember_result)that);
      return false;
    }

    public boolean equals(startMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetServerException()) ? 131071 : 524287);
      if (isSetServerException())
        hashCode = hashCode * 8191 + serverException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetServerException(), other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startMember_resultStandardScheme getScheme() {
        return new startMember_resultStandardScheme();
      }
    }

    private static class startMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<startMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Member();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startMember_resultTupleScheme getScheme() {
        return new startMember_resultTupleScheme();
      }
    }

    private static class startMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<startMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServerException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Member();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverException = new ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownMember_args implements org.apache.thrift.TBase<shutdownMember_args, shutdownMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownMember_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String memberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      MEMBER_ID((short)2, "memberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // MEMBER_ID
            return MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownMember_args.class, metaDataMap);
    }

    public shutdownMember_args() {
    }

    public shutdownMember_args(
      java.lang.String clusterId,
      java.lang.String memberId)
    {
      this();
      this.clusterId = clusterId;
      this.memberId = memberId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownMember_args(shutdownMember_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetMemberId()) {
        this.memberId = other.memberId;
      }
    }

    public shutdownMember_args deepCopy() {
      return new shutdownMember_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.memberId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public shutdownMember_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMemberId() {
      return this.memberId;
    }

    public shutdownMember_args setMemberId(@org.apache.thrift.annotation.Nullable java.lang.String memberId) {
      this.memberId = memberId;
      return this;
    }

    public void unsetMemberId() {
      this.memberId = null;
    }

    /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberId() {
      return this.memberId != null;
    }

    public void setMemberIdIsSet(boolean value) {
      if (!value) {
        this.memberId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case MEMBER_ID:
        if (value == null) {
          unsetMemberId();
        } else {
          setMemberId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case MEMBER_ID:
        return getMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case MEMBER_ID:
        return isSetMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownMember_args)
        return this.equals((shutdownMember_args)that);
      return false;
    }

    public boolean equals(shutdownMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_memberId = true && this.isSetMemberId();
      boolean that_present_memberId = true && that.isSetMemberId();
      if (this_present_memberId || that_present_memberId) {
        if (!(this_present_memberId && that_present_memberId))
          return false;
        if (!this.memberId.equals(that.memberId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMemberId()) ? 131071 : 524287);
      if (isSetMemberId())
        hashCode = hashCode * 8191 + memberId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMemberId(), other.isSetMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownMember_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberId:");
      if (this.memberId == null) {
        sb.append("null");
      } else {
        sb.append(this.memberId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownMember_argsStandardScheme getScheme() {
        return new shutdownMember_argsStandardScheme();
      }
    }

    private static class shutdownMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberId = iprot.readString();
                struct.setMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.memberId != null) {
          oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
          oprot.writeString(struct.memberId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownMember_argsTupleScheme getScheme() {
        return new shutdownMember_argsTupleScheme();
      }
    }

    private static class shutdownMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetMemberId()) {
          oprot.writeString(struct.memberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberId = iprot.readString();
          struct.setMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownMember_result implements org.apache.thrift.TBase<shutdownMember_result, shutdownMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownMember_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownMember_result.class, metaDataMap);
    }

    public shutdownMember_result() {
    }

    public shutdownMember_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownMember_result(shutdownMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public shutdownMember_result deepCopy() {
      return new shutdownMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public shutdownMember_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownMember_result)
        return this.equals((shutdownMember_result)that);
      return false;
    }

    public boolean equals(shutdownMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(shutdownMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownMember_resultStandardScheme getScheme() {
        return new shutdownMember_resultStandardScheme();
      }
    }

    private static class shutdownMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownMember_resultTupleScheme getScheme() {
        return new shutdownMember_resultTupleScheme();
      }
    }

    private static class shutdownMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateMember_args implements org.apache.thrift.TBase<terminateMember_args, terminateMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateMember_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String memberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      MEMBER_ID((short)2, "memberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // MEMBER_ID
            return MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateMember_args.class, metaDataMap);
    }

    public terminateMember_args() {
    }

    public terminateMember_args(
      java.lang.String clusterId,
      java.lang.String memberId)
    {
      this();
      this.clusterId = clusterId;
      this.memberId = memberId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateMember_args(terminateMember_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetMemberId()) {
        this.memberId = other.memberId;
      }
    }

    public terminateMember_args deepCopy() {
      return new terminateMember_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.memberId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public terminateMember_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMemberId() {
      return this.memberId;
    }

    public terminateMember_args setMemberId(@org.apache.thrift.annotation.Nullable java.lang.String memberId) {
      this.memberId = memberId;
      return this;
    }

    public void unsetMemberId() {
      this.memberId = null;
    }

    /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberId() {
      return this.memberId != null;
    }

    public void setMemberIdIsSet(boolean value) {
      if (!value) {
        this.memberId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case MEMBER_ID:
        if (value == null) {
          unsetMemberId();
        } else {
          setMemberId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case MEMBER_ID:
        return getMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case MEMBER_ID:
        return isSetMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof terminateMember_args)
        return this.equals((terminateMember_args)that);
      return false;
    }

    public boolean equals(terminateMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_memberId = true && this.isSetMemberId();
      boolean that_present_memberId = true && that.isSetMemberId();
      if (this_present_memberId || that_present_memberId) {
        if (!(this_present_memberId && that_present_memberId))
          return false;
        if (!this.memberId.equals(that.memberId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMemberId()) ? 131071 : 524287);
      if (isSetMemberId())
        hashCode = hashCode * 8191 + memberId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMemberId(), other.isSetMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateMember_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberId:");
      if (this.memberId == null) {
        sb.append("null");
      } else {
        sb.append(this.memberId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateMember_argsStandardScheme getScheme() {
        return new terminateMember_argsStandardScheme();
      }
    }

    private static class terminateMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberId = iprot.readString();
                struct.setMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.memberId != null) {
          oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
          oprot.writeString(struct.memberId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateMember_argsTupleScheme getScheme() {
        return new terminateMember_argsTupleScheme();
      }
    }

    private static class terminateMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetMemberId()) {
          oprot.writeString(struct.memberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberId = iprot.readString();
          struct.setMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateMember_result implements org.apache.thrift.TBase<terminateMember_result, terminateMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateMember_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateMember_result.class, metaDataMap);
    }

    public terminateMember_result() {
    }

    public terminateMember_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateMember_result(terminateMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public terminateMember_result deepCopy() {
      return new terminateMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public terminateMember_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof terminateMember_result)
        return this.equals((terminateMember_result)that);
      return false;
    }

    public boolean equals(terminateMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(terminateMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateMember_resultStandardScheme getScheme() {
        return new terminateMember_resultStandardScheme();
      }
    }

    private static class terminateMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateMember_resultTupleScheme getScheme() {
        return new terminateMember_resultTupleScheme();
      }
    }

    private static class terminateMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class suspendMember_args implements org.apache.thrift.TBase<suspendMember_args, suspendMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<suspendMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suspendMember_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new suspendMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new suspendMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String memberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      MEMBER_ID((short)2, "memberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // MEMBER_ID
            return MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suspendMember_args.class, metaDataMap);
    }

    public suspendMember_args() {
    }

    public suspendMember_args(
      java.lang.String clusterId,
      java.lang.String memberId)
    {
      this();
      this.clusterId = clusterId;
      this.memberId = memberId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suspendMember_args(suspendMember_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetMemberId()) {
        this.memberId = other.memberId;
      }
    }

    public suspendMember_args deepCopy() {
      return new suspendMember_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.memberId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public suspendMember_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMemberId() {
      return this.memberId;
    }

    public suspendMember_args setMemberId(@org.apache.thrift.annotation.Nullable java.lang.String memberId) {
      this.memberId = memberId;
      return this;
    }

    public void unsetMemberId() {
      this.memberId = null;
    }

    /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberId() {
      return this.memberId != null;
    }

    public void setMemberIdIsSet(boolean value) {
      if (!value) {
        this.memberId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case MEMBER_ID:
        if (value == null) {
          unsetMemberId();
        } else {
          setMemberId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case MEMBER_ID:
        return getMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case MEMBER_ID:
        return isSetMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof suspendMember_args)
        return this.equals((suspendMember_args)that);
      return false;
    }

    public boolean equals(suspendMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_memberId = true && this.isSetMemberId();
      boolean that_present_memberId = true && that.isSetMemberId();
      if (this_present_memberId || that_present_memberId) {
        if (!(this_present_memberId && that_present_memberId))
          return false;
        if (!this.memberId.equals(that.memberId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMemberId()) ? 131071 : 524287);
      if (isSetMemberId())
        hashCode = hashCode * 8191 + memberId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(suspendMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMemberId(), other.isSetMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("suspendMember_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberId:");
      if (this.memberId == null) {
        sb.append("null");
      } else {
        sb.append(this.memberId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suspendMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suspendMember_argsStandardScheme getScheme() {
        return new suspendMember_argsStandardScheme();
      }
    }

    private static class suspendMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<suspendMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suspendMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberId = iprot.readString();
                struct.setMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suspendMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.memberId != null) {
          oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
          oprot.writeString(struct.memberId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suspendMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suspendMember_argsTupleScheme getScheme() {
        return new suspendMember_argsTupleScheme();
      }
    }

    private static class suspendMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<suspendMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suspendMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetMemberId()) {
          oprot.writeString(struct.memberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suspendMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberId = iprot.readString();
          struct.setMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class suspendMember_result implements org.apache.thrift.TBase<suspendMember_result, suspendMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<suspendMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("suspendMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new suspendMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new suspendMember_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(suspendMember_result.class, metaDataMap);
    }

    public suspendMember_result() {
    }

    public suspendMember_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public suspendMember_result(suspendMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public suspendMember_result deepCopy() {
      return new suspendMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public suspendMember_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof suspendMember_result)
        return this.equals((suspendMember_result)that);
      return false;
    }

    public boolean equals(suspendMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(suspendMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("suspendMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class suspendMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suspendMember_resultStandardScheme getScheme() {
        return new suspendMember_resultStandardScheme();
      }
    }

    private static class suspendMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<suspendMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, suspendMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, suspendMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class suspendMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public suspendMember_resultTupleScheme getScheme() {
        return new suspendMember_resultTupleScheme();
      }
    }

    private static class suspendMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<suspendMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, suspendMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, suspendMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeMember_args implements org.apache.thrift.TBase<resumeMember_args, resumeMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<resumeMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeMember_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField MEMBER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("memberId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String memberId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      MEMBER_ID((short)2, "memberId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // MEMBER_ID
            return MEMBER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MEMBER_ID, new org.apache.thrift.meta_data.FieldMetaData("memberId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeMember_args.class, metaDataMap);
    }

    public resumeMember_args() {
    }

    public resumeMember_args(
      java.lang.String clusterId,
      java.lang.String memberId)
    {
      this();
      this.clusterId = clusterId;
      this.memberId = memberId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeMember_args(resumeMember_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetMemberId()) {
        this.memberId = other.memberId;
      }
    }

    public resumeMember_args deepCopy() {
      return new resumeMember_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.memberId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public resumeMember_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getMemberId() {
      return this.memberId;
    }

    public resumeMember_args setMemberId(@org.apache.thrift.annotation.Nullable java.lang.String memberId) {
      this.memberId = memberId;
      return this;
    }

    public void unsetMemberId() {
      this.memberId = null;
    }

    /** Returns true if field memberId is set (has been assigned a value) and false otherwise */
    public boolean isSetMemberId() {
      return this.memberId != null;
    }

    public void setMemberIdIsSet(boolean value) {
      if (!value) {
        this.memberId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case MEMBER_ID:
        if (value == null) {
          unsetMemberId();
        } else {
          setMemberId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case MEMBER_ID:
        return getMemberId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case MEMBER_ID:
        return isSetMemberId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof resumeMember_args)
        return this.equals((resumeMember_args)that);
      return false;
    }

    public boolean equals(resumeMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_memberId = true && this.isSetMemberId();
      boolean that_present_memberId = true && that.isSetMemberId();
      if (this_present_memberId || that_present_memberId) {
        if (!(this_present_memberId && that_present_memberId))
          return false;
        if (!this.memberId.equals(that.memberId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMemberId()) ? 131071 : 524287);
      if (isSetMemberId())
        hashCode = hashCode * 8191 + memberId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(resumeMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetMemberId(), other.isSetMemberId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMemberId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.memberId, other.memberId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeMember_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("memberId:");
      if (this.memberId == null) {
        sb.append("null");
      } else {
        sb.append(this.memberId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeMember_argsStandardScheme getScheme() {
        return new resumeMember_argsStandardScheme();
      }
    }

    private static class resumeMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // MEMBER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.memberId = iprot.readString();
                struct.setMemberIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.memberId != null) {
          oprot.writeFieldBegin(MEMBER_ID_FIELD_DESC);
          oprot.writeString(struct.memberId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeMember_argsTupleScheme getScheme() {
        return new resumeMember_argsTupleScheme();
      }
    }

    private static class resumeMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetMemberId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetMemberId()) {
          oprot.writeString(struct.memberId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.memberId = iprot.readString();
          struct.setMemberIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeMember_result implements org.apache.thrift.TBase<resumeMember_result, resumeMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<resumeMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeMember_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeMember_result.class, metaDataMap);
    }

    public resumeMember_result() {
    }

    public resumeMember_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeMember_result(resumeMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public resumeMember_result deepCopy() {
      return new resumeMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public resumeMember_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof resumeMember_result)
        return this.equals((resumeMember_result)that);
      return false;
    }

    public boolean equals(resumeMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(resumeMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeMember_resultStandardScheme getScheme() {
        return new resumeMember_resultStandardScheme();
      }
    }

    private static class resumeMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeMember_resultTupleScheme getScheme() {
        return new resumeMember_resultTupleScheme();
      }
    }

    private static class resumeMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createDockerCluster_args implements org.apache.thrift.TBase<createDockerCluster_args, createDockerCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<createDockerCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDockerCluster_args");

    private static final org.apache.thrift.protocol.TField DOCKER_IMAGE_STRING_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerImageString", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField XMLCONFIG_PATH_FIELD_DESC = new org.apache.thrift.protocol.TField("xmlconfigPath", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField HAZELCAST_ENTERPRISE_LICENSE_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("hazelcastEnterpriseLicenseKey", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createDockerCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createDockerCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerImageString; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String xmlconfigPath; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String hazelcastEnterpriseLicenseKey; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_IMAGE_STRING((short)1, "dockerImageString"),
      XMLCONFIG_PATH((short)2, "xmlconfigPath"),
      HAZELCAST_ENTERPRISE_LICENSE_KEY((short)3, "hazelcastEnterpriseLicenseKey");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_IMAGE_STRING
            return DOCKER_IMAGE_STRING;
          case 2: // XMLCONFIG_PATH
            return XMLCONFIG_PATH;
          case 3: // HAZELCAST_ENTERPRISE_LICENSE_KEY
            return HAZELCAST_ENTERPRISE_LICENSE_KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_IMAGE_STRING, new org.apache.thrift.meta_data.FieldMetaData("dockerImageString", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.XMLCONFIG_PATH, new org.apache.thrift.meta_data.FieldMetaData("xmlconfigPath", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.HAZELCAST_ENTERPRISE_LICENSE_KEY, new org.apache.thrift.meta_data.FieldMetaData("hazelcastEnterpriseLicenseKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDockerCluster_args.class, metaDataMap);
    }

    public createDockerCluster_args() {
    }

    public createDockerCluster_args(
      java.lang.String dockerImageString,
      java.lang.String xmlconfigPath,
      java.lang.String hazelcastEnterpriseLicenseKey)
    {
      this();
      this.dockerImageString = dockerImageString;
      this.xmlconfigPath = xmlconfigPath;
      this.hazelcastEnterpriseLicenseKey = hazelcastEnterpriseLicenseKey;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDockerCluster_args(createDockerCluster_args other) {
      if (other.isSetDockerImageString()) {
        this.dockerImageString = other.dockerImageString;
      }
      if (other.isSetXmlconfigPath()) {
        this.xmlconfigPath = other.xmlconfigPath;
      }
      if (other.isSetHazelcastEnterpriseLicenseKey()) {
        this.hazelcastEnterpriseLicenseKey = other.hazelcastEnterpriseLicenseKey;
      }
    }

    public createDockerCluster_args deepCopy() {
      return new createDockerCluster_args(this);
    }

    @Override
    public void clear() {
      this.dockerImageString = null;
      this.xmlconfigPath = null;
      this.hazelcastEnterpriseLicenseKey = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerImageString() {
      return this.dockerImageString;
    }

    public createDockerCluster_args setDockerImageString(@org.apache.thrift.annotation.Nullable java.lang.String dockerImageString) {
      this.dockerImageString = dockerImageString;
      return this;
    }

    public void unsetDockerImageString() {
      this.dockerImageString = null;
    }

    /** Returns true if field dockerImageString is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerImageString() {
      return this.dockerImageString != null;
    }

    public void setDockerImageStringIsSet(boolean value) {
      if (!value) {
        this.dockerImageString = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getXmlconfigPath() {
      return this.xmlconfigPath;
    }

    public createDockerCluster_args setXmlconfigPath(@org.apache.thrift.annotation.Nullable java.lang.String xmlconfigPath) {
      this.xmlconfigPath = xmlconfigPath;
      return this;
    }

    public void unsetXmlconfigPath() {
      this.xmlconfigPath = null;
    }

    /** Returns true if field xmlconfigPath is set (has been assigned a value) and false otherwise */
    public boolean isSetXmlconfigPath() {
      return this.xmlconfigPath != null;
    }

    public void setXmlconfigPathIsSet(boolean value) {
      if (!value) {
        this.xmlconfigPath = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHazelcastEnterpriseLicenseKey() {
      return this.hazelcastEnterpriseLicenseKey;
    }

    public createDockerCluster_args setHazelcastEnterpriseLicenseKey(@org.apache.thrift.annotation.Nullable java.lang.String hazelcastEnterpriseLicenseKey) {
      this.hazelcastEnterpriseLicenseKey = hazelcastEnterpriseLicenseKey;
      return this;
    }

    public void unsetHazelcastEnterpriseLicenseKey() {
      this.hazelcastEnterpriseLicenseKey = null;
    }

    /** Returns true if field hazelcastEnterpriseLicenseKey is set (has been assigned a value) and false otherwise */
    public boolean isSetHazelcastEnterpriseLicenseKey() {
      return this.hazelcastEnterpriseLicenseKey != null;
    }

    public void setHazelcastEnterpriseLicenseKeyIsSet(boolean value) {
      if (!value) {
        this.hazelcastEnterpriseLicenseKey = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_IMAGE_STRING:
        if (value == null) {
          unsetDockerImageString();
        } else {
          setDockerImageString((java.lang.String)value);
        }
        break;

      case XMLCONFIG_PATH:
        if (value == null) {
          unsetXmlconfigPath();
        } else {
          setXmlconfigPath((java.lang.String)value);
        }
        break;

      case HAZELCAST_ENTERPRISE_LICENSE_KEY:
        if (value == null) {
          unsetHazelcastEnterpriseLicenseKey();
        } else {
          setHazelcastEnterpriseLicenseKey((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_IMAGE_STRING:
        return getDockerImageString();

      case XMLCONFIG_PATH:
        return getXmlconfigPath();

      case HAZELCAST_ENTERPRISE_LICENSE_KEY:
        return getHazelcastEnterpriseLicenseKey();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_IMAGE_STRING:
        return isSetDockerImageString();
      case XMLCONFIG_PATH:
        return isSetXmlconfigPath();
      case HAZELCAST_ENTERPRISE_LICENSE_KEY:
        return isSetHazelcastEnterpriseLicenseKey();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createDockerCluster_args)
        return this.equals((createDockerCluster_args)that);
      return false;
    }

    public boolean equals(createDockerCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerImageString = true && this.isSetDockerImageString();
      boolean that_present_dockerImageString = true && that.isSetDockerImageString();
      if (this_present_dockerImageString || that_present_dockerImageString) {
        if (!(this_present_dockerImageString && that_present_dockerImageString))
          return false;
        if (!this.dockerImageString.equals(that.dockerImageString))
          return false;
      }

      boolean this_present_xmlconfigPath = true && this.isSetXmlconfigPath();
      boolean that_present_xmlconfigPath = true && that.isSetXmlconfigPath();
      if (this_present_xmlconfigPath || that_present_xmlconfigPath) {
        if (!(this_present_xmlconfigPath && that_present_xmlconfigPath))
          return false;
        if (!this.xmlconfigPath.equals(that.xmlconfigPath))
          return false;
      }

      boolean this_present_hazelcastEnterpriseLicenseKey = true && this.isSetHazelcastEnterpriseLicenseKey();
      boolean that_present_hazelcastEnterpriseLicenseKey = true && that.isSetHazelcastEnterpriseLicenseKey();
      if (this_present_hazelcastEnterpriseLicenseKey || that_present_hazelcastEnterpriseLicenseKey) {
        if (!(this_present_hazelcastEnterpriseLicenseKey && that_present_hazelcastEnterpriseLicenseKey))
          return false;
        if (!this.hazelcastEnterpriseLicenseKey.equals(that.hazelcastEnterpriseLicenseKey))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerImageString()) ? 131071 : 524287);
      if (isSetDockerImageString())
        hashCode = hashCode * 8191 + dockerImageString.hashCode();

      hashCode = hashCode * 8191 + ((isSetXmlconfigPath()) ? 131071 : 524287);
      if (isSetXmlconfigPath())
        hashCode = hashCode * 8191 + xmlconfigPath.hashCode();

      hashCode = hashCode * 8191 + ((isSetHazelcastEnterpriseLicenseKey()) ? 131071 : 524287);
      if (isSetHazelcastEnterpriseLicenseKey())
        hashCode = hashCode * 8191 + hazelcastEnterpriseLicenseKey.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createDockerCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerImageString(), other.isSetDockerImageString());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerImageString()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerImageString, other.dockerImageString);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetXmlconfigPath(), other.isSetXmlconfigPath());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetXmlconfigPath()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.xmlconfigPath, other.xmlconfigPath);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetHazelcastEnterpriseLicenseKey(), other.isSetHazelcastEnterpriseLicenseKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHazelcastEnterpriseLicenseKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hazelcastEnterpriseLicenseKey, other.hazelcastEnterpriseLicenseKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createDockerCluster_args(");
      boolean first = true;

      sb.append("dockerImageString:");
      if (this.dockerImageString == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerImageString);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("xmlconfigPath:");
      if (this.xmlconfigPath == null) {
        sb.append("null");
      } else {
        sb.append(this.xmlconfigPath);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hazelcastEnterpriseLicenseKey:");
      if (this.hazelcastEnterpriseLicenseKey == null) {
        sb.append("null");
      } else {
        sb.append(this.hazelcastEnterpriseLicenseKey);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDockerCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDockerCluster_argsStandardScheme getScheme() {
        return new createDockerCluster_argsStandardScheme();
      }
    }

    private static class createDockerCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createDockerCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_IMAGE_STRING
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerImageString = iprot.readString();
                struct.setDockerImageStringIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // XMLCONFIG_PATH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.xmlconfigPath = iprot.readString();
                struct.setXmlconfigPathIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HAZELCAST_ENTERPRISE_LICENSE_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hazelcastEnterpriseLicenseKey = iprot.readString();
                struct.setHazelcastEnterpriseLicenseKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDockerCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerImageString != null) {
          oprot.writeFieldBegin(DOCKER_IMAGE_STRING_FIELD_DESC);
          oprot.writeString(struct.dockerImageString);
          oprot.writeFieldEnd();
        }
        if (struct.xmlconfigPath != null) {
          oprot.writeFieldBegin(XMLCONFIG_PATH_FIELD_DESC);
          oprot.writeString(struct.xmlconfigPath);
          oprot.writeFieldEnd();
        }
        if (struct.hazelcastEnterpriseLicenseKey != null) {
          oprot.writeFieldBegin(HAZELCAST_ENTERPRISE_LICENSE_KEY_FIELD_DESC);
          oprot.writeString(struct.hazelcastEnterpriseLicenseKey);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDockerCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDockerCluster_argsTupleScheme getScheme() {
        return new createDockerCluster_argsTupleScheme();
      }
    }

    private static class createDockerCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createDockerCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerImageString()) {
          optionals.set(0);
        }
        if (struct.isSetXmlconfigPath()) {
          optionals.set(1);
        }
        if (struct.isSetHazelcastEnterpriseLicenseKey()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDockerImageString()) {
          oprot.writeString(struct.dockerImageString);
        }
        if (struct.isSetXmlconfigPath()) {
          oprot.writeString(struct.xmlconfigPath);
        }
        if (struct.isSetHazelcastEnterpriseLicenseKey()) {
          oprot.writeString(struct.hazelcastEnterpriseLicenseKey);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dockerImageString = iprot.readString();
          struct.setDockerImageStringIsSet(true);
        }
        if (incoming.get(1)) {
          struct.xmlconfigPath = iprot.readString();
          struct.setXmlconfigPathIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hazelcastEnterpriseLicenseKey = iprot.readString();
          struct.setHazelcastEnterpriseLicenseKeyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createDockerCluster_result implements org.apache.thrift.TBase<createDockerCluster_result, createDockerCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<createDockerCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createDockerCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createDockerCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createDockerCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DockerCluster success; // required
    public @org.apache.thrift.annotation.Nullable ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVER_EXCEPTION((short)1, "serverException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DockerCluster.class)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createDockerCluster_result.class, metaDataMap);
    }

    public createDockerCluster_result() {
    }

    public createDockerCluster_result(
      DockerCluster success,
      ServerException serverException)
    {
      this();
      this.success = success;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createDockerCluster_result(createDockerCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new DockerCluster(other.success);
      }
      if (other.isSetServerException()) {
        this.serverException = new ServerException(other.serverException);
      }
    }

    public createDockerCluster_result deepCopy() {
      return new createDockerCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.serverException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DockerCluster getSuccess() {
      return this.success;
    }

    public createDockerCluster_result setSuccess(@org.apache.thrift.annotation.Nullable DockerCluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ServerException getServerException() {
      return this.serverException;
    }

    public createDockerCluster_result setServerException(@org.apache.thrift.annotation.Nullable ServerException serverException) {
      this.serverException = serverException;
      return this;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DockerCluster)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((ServerException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createDockerCluster_result)
        return this.equals((createDockerCluster_result)that);
      return false;
    }

    public boolean equals(createDockerCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetServerException()) ? 131071 : 524287);
      if (isSetServerException())
        hashCode = hashCode * 8191 + serverException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createDockerCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetServerException(), other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createDockerCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createDockerCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDockerCluster_resultStandardScheme getScheme() {
        return new createDockerCluster_resultStandardScheme();
      }
    }

    private static class createDockerCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createDockerCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DockerCluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createDockerCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createDockerCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createDockerCluster_resultTupleScheme getScheme() {
        return new createDockerCluster_resultTupleScheme();
      }
    }

    private static class createDockerCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createDockerCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServerException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DockerCluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverException = new ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownDockerCluster_args implements org.apache.thrift.TBase<shutdownDockerCluster_args, shutdownDockerCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownDockerCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownDockerCluster_args");

    private static final org.apache.thrift.protocol.TField DOCKER_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownDockerCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownDockerCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_CLUSTER_ID((short)1, "dockerClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_CLUSTER_ID
            return DOCKER_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownDockerCluster_args.class, metaDataMap);
    }

    public shutdownDockerCluster_args() {
    }

    public shutdownDockerCluster_args(
      java.lang.String dockerClusterId)
    {
      this();
      this.dockerClusterId = dockerClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownDockerCluster_args(shutdownDockerCluster_args other) {
      if (other.isSetDockerClusterId()) {
        this.dockerClusterId = other.dockerClusterId;
      }
    }

    public shutdownDockerCluster_args deepCopy() {
      return new shutdownDockerCluster_args(this);
    }

    @Override
    public void clear() {
      this.dockerClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerClusterId() {
      return this.dockerClusterId;
    }

    public shutdownDockerCluster_args setDockerClusterId(@org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId) {
      this.dockerClusterId = dockerClusterId;
      return this;
    }

    public void unsetDockerClusterId() {
      this.dockerClusterId = null;
    }

    /** Returns true if field dockerClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerClusterId() {
      return this.dockerClusterId != null;
    }

    public void setDockerClusterIdIsSet(boolean value) {
      if (!value) {
        this.dockerClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        if (value == null) {
          unsetDockerClusterId();
        } else {
          setDockerClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        return getDockerClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_CLUSTER_ID:
        return isSetDockerClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownDockerCluster_args)
        return this.equals((shutdownDockerCluster_args)that);
      return false;
    }

    public boolean equals(shutdownDockerCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerClusterId = true && this.isSetDockerClusterId();
      boolean that_present_dockerClusterId = true && that.isSetDockerClusterId();
      if (this_present_dockerClusterId || that_present_dockerClusterId) {
        if (!(this_present_dockerClusterId && that_present_dockerClusterId))
          return false;
        if (!this.dockerClusterId.equals(that.dockerClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerClusterId()) ? 131071 : 524287);
      if (isSetDockerClusterId())
        hashCode = hashCode * 8191 + dockerClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownDockerCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerClusterId(), other.isSetDockerClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerClusterId, other.dockerClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownDockerCluster_args(");
      boolean first = true;

      sb.append("dockerClusterId:");
      if (this.dockerClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownDockerCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerCluster_argsStandardScheme getScheme() {
        return new shutdownDockerCluster_argsStandardScheme();
      }
    }

    private static class shutdownDockerCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownDockerCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerClusterId = iprot.readString();
                struct.setDockerClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownDockerCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerClusterId != null) {
          oprot.writeFieldBegin(DOCKER_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.dockerClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownDockerCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerCluster_argsTupleScheme getScheme() {
        return new shutdownDockerCluster_argsTupleScheme();
      }
    }

    private static class shutdownDockerCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownDockerCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDockerClusterId()) {
          oprot.writeString(struct.dockerClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownDockerCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dockerClusterId = iprot.readString();
          struct.setDockerClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownDockerCluster_result implements org.apache.thrift.TBase<shutdownDockerCluster_result, shutdownDockerCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownDockerCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownDockerCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownDockerCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownDockerCluster_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownDockerCluster_result.class, metaDataMap);
    }

    public shutdownDockerCluster_result() {
    }

    public shutdownDockerCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownDockerCluster_result(shutdownDockerCluster_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public shutdownDockerCluster_result deepCopy() {
      return new shutdownDockerCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public shutdownDockerCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownDockerCluster_result)
        return this.equals((shutdownDockerCluster_result)that);
      return false;
    }

    public boolean equals(shutdownDockerCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(shutdownDockerCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownDockerCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownDockerCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerCluster_resultStandardScheme getScheme() {
        return new shutdownDockerCluster_resultStandardScheme();
      }
    }

    private static class shutdownDockerCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownDockerCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownDockerCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownDockerCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerCluster_resultTupleScheme getScheme() {
        return new shutdownDockerCluster_resultTupleScheme();
      }
    }

    private static class shutdownDockerCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownDockerCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownDockerCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startDockerMember_args implements org.apache.thrift.TBase<startDockerMember_args, startDockerMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<startDockerMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startDockerMember_args");

    private static final org.apache.thrift.protocol.TField DOCKER_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startDockerMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startDockerMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_CLUSTER_ID((short)1, "dockerClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_CLUSTER_ID
            return DOCKER_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startDockerMember_args.class, metaDataMap);
    }

    public startDockerMember_args() {
    }

    public startDockerMember_args(
      java.lang.String dockerClusterId)
    {
      this();
      this.dockerClusterId = dockerClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startDockerMember_args(startDockerMember_args other) {
      if (other.isSetDockerClusterId()) {
        this.dockerClusterId = other.dockerClusterId;
      }
    }

    public startDockerMember_args deepCopy() {
      return new startDockerMember_args(this);
    }

    @Override
    public void clear() {
      this.dockerClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerClusterId() {
      return this.dockerClusterId;
    }

    public startDockerMember_args setDockerClusterId(@org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId) {
      this.dockerClusterId = dockerClusterId;
      return this;
    }

    public void unsetDockerClusterId() {
      this.dockerClusterId = null;
    }

    /** Returns true if field dockerClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerClusterId() {
      return this.dockerClusterId != null;
    }

    public void setDockerClusterIdIsSet(boolean value) {
      if (!value) {
        this.dockerClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        if (value == null) {
          unsetDockerClusterId();
        } else {
          setDockerClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        return getDockerClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_CLUSTER_ID:
        return isSetDockerClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof startDockerMember_args)
        return this.equals((startDockerMember_args)that);
      return false;
    }

    public boolean equals(startDockerMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerClusterId = true && this.isSetDockerClusterId();
      boolean that_present_dockerClusterId = true && that.isSetDockerClusterId();
      if (this_present_dockerClusterId || that_present_dockerClusterId) {
        if (!(this_present_dockerClusterId && that_present_dockerClusterId))
          return false;
        if (!this.dockerClusterId.equals(that.dockerClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerClusterId()) ? 131071 : 524287);
      if (isSetDockerClusterId())
        hashCode = hashCode * 8191 + dockerClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startDockerMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerClusterId(), other.isSetDockerClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerClusterId, other.dockerClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startDockerMember_args(");
      boolean first = true;

      sb.append("dockerClusterId:");
      if (this.dockerClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startDockerMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startDockerMember_argsStandardScheme getScheme() {
        return new startDockerMember_argsStandardScheme();
      }
    }

    private static class startDockerMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<startDockerMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerClusterId = iprot.readString();
                struct.setDockerClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startDockerMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerClusterId != null) {
          oprot.writeFieldBegin(DOCKER_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.dockerClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startDockerMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startDockerMember_argsTupleScheme getScheme() {
        return new startDockerMember_argsTupleScheme();
      }
    }

    private static class startDockerMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<startDockerMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDockerClusterId()) {
          oprot.writeString(struct.dockerClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dockerClusterId = iprot.readString();
          struct.setDockerClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class startDockerMember_result implements org.apache.thrift.TBase<startDockerMember_result, startDockerMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<startDockerMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startDockerMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new startDockerMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new startDockerMember_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable DockerMember success; // required
    public @org.apache.thrift.annotation.Nullable ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SERVER_EXCEPTION((short)1, "serverException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DockerMember.class)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ServerException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startDockerMember_result.class, metaDataMap);
    }

    public startDockerMember_result() {
    }

    public startDockerMember_result(
      DockerMember success,
      ServerException serverException)
    {
      this();
      this.success = success;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startDockerMember_result(startDockerMember_result other) {
      if (other.isSetSuccess()) {
        this.success = new DockerMember(other.success);
      }
      if (other.isSetServerException()) {
        this.serverException = new ServerException(other.serverException);
      }
    }

    public startDockerMember_result deepCopy() {
      return new startDockerMember_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.serverException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public DockerMember getSuccess() {
      return this.success;
    }

    public startDockerMember_result setSuccess(@org.apache.thrift.annotation.Nullable DockerMember success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public ServerException getServerException() {
      return this.serverException;
    }

    public startDockerMember_result setServerException(@org.apache.thrift.annotation.Nullable ServerException serverException) {
      this.serverException = serverException;
      return this;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((DockerMember)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((ServerException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof startDockerMember_result)
        return this.equals((startDockerMember_result)that);
      return false;
    }

    public boolean equals(startDockerMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetServerException()) ? 131071 : 524287);
      if (isSetServerException())
        hashCode = hashCode * 8191 + serverException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(startDockerMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetServerException(), other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("startDockerMember_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startDockerMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startDockerMember_resultStandardScheme getScheme() {
        return new startDockerMember_resultStandardScheme();
      }
    }

    private static class startDockerMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<startDockerMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new DockerMember();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startDockerMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startDockerMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public startDockerMember_resultTupleScheme getScheme() {
        return new startDockerMember_resultTupleScheme();
      }
    }

    private static class startDockerMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<startDockerMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetServerException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new DockerMember();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.serverException = new ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownDockerMember_args implements org.apache.thrift.TBase<shutdownDockerMember_args, shutdownDockerMember_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownDockerMember_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownDockerMember_args");

    private static final org.apache.thrift.protocol.TField DOCKER_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CONTAINER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("containerId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownDockerMember_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownDockerMember_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String containerId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_CLUSTER_ID((short)1, "dockerClusterId"),
      CONTAINER_ID((short)2, "containerId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_CLUSTER_ID
            return DOCKER_CLUSTER_ID;
          case 2: // CONTAINER_ID
            return CONTAINER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CONTAINER_ID, new org.apache.thrift.meta_data.FieldMetaData("containerId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownDockerMember_args.class, metaDataMap);
    }

    public shutdownDockerMember_args() {
    }

    public shutdownDockerMember_args(
      java.lang.String dockerClusterId,
      java.lang.String containerId)
    {
      this();
      this.dockerClusterId = dockerClusterId;
      this.containerId = containerId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownDockerMember_args(shutdownDockerMember_args other) {
      if (other.isSetDockerClusterId()) {
        this.dockerClusterId = other.dockerClusterId;
      }
      if (other.isSetContainerId()) {
        this.containerId = other.containerId;
      }
    }

    public shutdownDockerMember_args deepCopy() {
      return new shutdownDockerMember_args(this);
    }

    @Override
    public void clear() {
      this.dockerClusterId = null;
      this.containerId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerClusterId() {
      return this.dockerClusterId;
    }

    public shutdownDockerMember_args setDockerClusterId(@org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId) {
      this.dockerClusterId = dockerClusterId;
      return this;
    }

    public void unsetDockerClusterId() {
      this.dockerClusterId = null;
    }

    /** Returns true if field dockerClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerClusterId() {
      return this.dockerClusterId != null;
    }

    public void setDockerClusterIdIsSet(boolean value) {
      if (!value) {
        this.dockerClusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getContainerId() {
      return this.containerId;
    }

    public shutdownDockerMember_args setContainerId(@org.apache.thrift.annotation.Nullable java.lang.String containerId) {
      this.containerId = containerId;
      return this;
    }

    public void unsetContainerId() {
      this.containerId = null;
    }

    /** Returns true if field containerId is set (has been assigned a value) and false otherwise */
    public boolean isSetContainerId() {
      return this.containerId != null;
    }

    public void setContainerIdIsSet(boolean value) {
      if (!value) {
        this.containerId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        if (value == null) {
          unsetDockerClusterId();
        } else {
          setDockerClusterId((java.lang.String)value);
        }
        break;

      case CONTAINER_ID:
        if (value == null) {
          unsetContainerId();
        } else {
          setContainerId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        return getDockerClusterId();

      case CONTAINER_ID:
        return getContainerId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_CLUSTER_ID:
        return isSetDockerClusterId();
      case CONTAINER_ID:
        return isSetContainerId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownDockerMember_args)
        return this.equals((shutdownDockerMember_args)that);
      return false;
    }

    public boolean equals(shutdownDockerMember_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerClusterId = true && this.isSetDockerClusterId();
      boolean that_present_dockerClusterId = true && that.isSetDockerClusterId();
      if (this_present_dockerClusterId || that_present_dockerClusterId) {
        if (!(this_present_dockerClusterId && that_present_dockerClusterId))
          return false;
        if (!this.dockerClusterId.equals(that.dockerClusterId))
          return false;
      }

      boolean this_present_containerId = true && this.isSetContainerId();
      boolean that_present_containerId = true && that.isSetContainerId();
      if (this_present_containerId || that_present_containerId) {
        if (!(this_present_containerId && that_present_containerId))
          return false;
        if (!this.containerId.equals(that.containerId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerClusterId()) ? 131071 : 524287);
      if (isSetDockerClusterId())
        hashCode = hashCode * 8191 + dockerClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetContainerId()) ? 131071 : 524287);
      if (isSetContainerId())
        hashCode = hashCode * 8191 + containerId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownDockerMember_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerClusterId(), other.isSetDockerClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerClusterId, other.dockerClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetContainerId(), other.isSetContainerId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContainerId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.containerId, other.containerId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownDockerMember_args(");
      boolean first = true;

      sb.append("dockerClusterId:");
      if (this.dockerClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("containerId:");
      if (this.containerId == null) {
        sb.append("null");
      } else {
        sb.append(this.containerId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownDockerMember_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerMember_argsStandardScheme getScheme() {
        return new shutdownDockerMember_argsStandardScheme();
      }
    }

    private static class shutdownDockerMember_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownDockerMember_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerClusterId = iprot.readString();
                struct.setDockerClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTAINER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.containerId = iprot.readString();
                struct.setContainerIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownDockerMember_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerClusterId != null) {
          oprot.writeFieldBegin(DOCKER_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.dockerClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.containerId != null) {
          oprot.writeFieldBegin(CONTAINER_ID_FIELD_DESC);
          oprot.writeString(struct.containerId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownDockerMember_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerMember_argsTupleScheme getScheme() {
        return new shutdownDockerMember_argsTupleScheme();
      }
    }

    private static class shutdownDockerMember_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownDockerMember_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetContainerId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDockerClusterId()) {
          oprot.writeString(struct.dockerClusterId);
        }
        if (struct.isSetContainerId()) {
          oprot.writeString(struct.containerId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownDockerMember_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dockerClusterId = iprot.readString();
          struct.setDockerClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.containerId = iprot.readString();
          struct.setContainerIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownDockerMember_result implements org.apache.thrift.TBase<shutdownDockerMember_result, shutdownDockerMember_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownDockerMember_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownDockerMember_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownDockerMember_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownDockerMember_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownDockerMember_result.class, metaDataMap);
    }

    public shutdownDockerMember_result() {
    }

    public shutdownDockerMember_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownDockerMember_result(shutdownDockerMember_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public shutdownDockerMember_result deepCopy() {
      return new shutdownDockerMember_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public shutdownDockerMember_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof shutdownDockerMember_result)
        return this.equals((shutdownDockerMember_result)that);
      return false;
    }

    public boolean equals(shutdownDockerMember_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(shutdownDockerMember_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownDockerMember_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownDockerMember_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerMember_resultStandardScheme getScheme() {
        return new shutdownDockerMember_resultStandardScheme();
      }
    }

    private static class shutdownDockerMember_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownDockerMember_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownDockerMember_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownDockerMember_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownDockerMember_resultTupleScheme getScheme() {
        return new shutdownDockerMember_resultTupleScheme();
      }
    }

    private static class shutdownDockerMember_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownDockerMember_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownDockerMember_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class splitClusterAs_args implements org.apache.thrift.TBase<splitClusterAs_args, splitClusterAs_args._Fields>, java.io.Serializable, Cloneable, Comparable<splitClusterAs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("splitClusterAs_args");

    private static final org.apache.thrift.protocol.TField DOCKER_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BRAIN1_FIELD_DESC = new org.apache.thrift.protocol.TField("brain1", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField BRAIN2_FIELD_DESC = new org.apache.thrift.protocol.TField("brain2", org.apache.thrift.protocol.TType.LIST, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new splitClusterAs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new splitClusterAs_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> brain1; // required
    public @org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> brain2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_CLUSTER_ID((short)1, "dockerClusterId"),
      BRAIN1((short)2, "brain1"),
      BRAIN2((short)3, "brain2");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_CLUSTER_ID
            return DOCKER_CLUSTER_ID;
          case 2: // BRAIN1
            return BRAIN1;
          case 3: // BRAIN2
            return BRAIN2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.BRAIN1, new org.apache.thrift.meta_data.FieldMetaData("brain1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.BRAIN2, new org.apache.thrift.meta_data.FieldMetaData("brain2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(splitClusterAs_args.class, metaDataMap);
    }

    public splitClusterAs_args() {
    }

    public splitClusterAs_args(
      java.lang.String dockerClusterId,
      java.util.List<java.lang.String> brain1,
      java.util.List<java.lang.String> brain2)
    {
      this();
      this.dockerClusterId = dockerClusterId;
      this.brain1 = brain1;
      this.brain2 = brain2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public splitClusterAs_args(splitClusterAs_args other) {
      if (other.isSetDockerClusterId()) {
        this.dockerClusterId = other.dockerClusterId;
      }
      if (other.isSetBrain1()) {
        java.util.List<java.lang.String> __this__brain1 = new java.util.ArrayList<java.lang.String>(other.brain1);
        this.brain1 = __this__brain1;
      }
      if (other.isSetBrain2()) {
        java.util.List<java.lang.String> __this__brain2 = new java.util.ArrayList<java.lang.String>(other.brain2);
        this.brain2 = __this__brain2;
      }
    }

    public splitClusterAs_args deepCopy() {
      return new splitClusterAs_args(this);
    }

    @Override
    public void clear() {
      this.dockerClusterId = null;
      this.brain1 = null;
      this.brain2 = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerClusterId() {
      return this.dockerClusterId;
    }

    public splitClusterAs_args setDockerClusterId(@org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId) {
      this.dockerClusterId = dockerClusterId;
      return this;
    }

    public void unsetDockerClusterId() {
      this.dockerClusterId = null;
    }

    /** Returns true if field dockerClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerClusterId() {
      return this.dockerClusterId != null;
    }

    public void setDockerClusterIdIsSet(boolean value) {
      if (!value) {
        this.dockerClusterId = null;
      }
    }

    public int getBrain1Size() {
      return (this.brain1 == null) ? 0 : this.brain1.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getBrain1Iterator() {
      return (this.brain1 == null) ? null : this.brain1.iterator();
    }

    public void addToBrain1(java.lang.String elem) {
      if (this.brain1 == null) {
        this.brain1 = new java.util.ArrayList<java.lang.String>();
      }
      this.brain1.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getBrain1() {
      return this.brain1;
    }

    public splitClusterAs_args setBrain1(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> brain1) {
      this.brain1 = brain1;
      return this;
    }

    public void unsetBrain1() {
      this.brain1 = null;
    }

    /** Returns true if field brain1 is set (has been assigned a value) and false otherwise */
    public boolean isSetBrain1() {
      return this.brain1 != null;
    }

    public void setBrain1IsSet(boolean value) {
      if (!value) {
        this.brain1 = null;
      }
    }

    public int getBrain2Size() {
      return (this.brain2 == null) ? 0 : this.brain2.size();
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.Iterator<java.lang.String> getBrain2Iterator() {
      return (this.brain2 == null) ? null : this.brain2.iterator();
    }

    public void addToBrain2(java.lang.String elem) {
      if (this.brain2 == null) {
        this.brain2 = new java.util.ArrayList<java.lang.String>();
      }
      this.brain2.add(elem);
    }

    @org.apache.thrift.annotation.Nullable
    public java.util.List<java.lang.String> getBrain2() {
      return this.brain2;
    }

    public splitClusterAs_args setBrain2(@org.apache.thrift.annotation.Nullable java.util.List<java.lang.String> brain2) {
      this.brain2 = brain2;
      return this;
    }

    public void unsetBrain2() {
      this.brain2 = null;
    }

    /** Returns true if field brain2 is set (has been assigned a value) and false otherwise */
    public boolean isSetBrain2() {
      return this.brain2 != null;
    }

    public void setBrain2IsSet(boolean value) {
      if (!value) {
        this.brain2 = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        if (value == null) {
          unsetDockerClusterId();
        } else {
          setDockerClusterId((java.lang.String)value);
        }
        break;

      case BRAIN1:
        if (value == null) {
          unsetBrain1();
        } else {
          setBrain1((java.util.List<java.lang.String>)value);
        }
        break;

      case BRAIN2:
        if (value == null) {
          unsetBrain2();
        } else {
          setBrain2((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        return getDockerClusterId();

      case BRAIN1:
        return getBrain1();

      case BRAIN2:
        return getBrain2();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_CLUSTER_ID:
        return isSetDockerClusterId();
      case BRAIN1:
        return isSetBrain1();
      case BRAIN2:
        return isSetBrain2();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof splitClusterAs_args)
        return this.equals((splitClusterAs_args)that);
      return false;
    }

    public boolean equals(splitClusterAs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerClusterId = true && this.isSetDockerClusterId();
      boolean that_present_dockerClusterId = true && that.isSetDockerClusterId();
      if (this_present_dockerClusterId || that_present_dockerClusterId) {
        if (!(this_present_dockerClusterId && that_present_dockerClusterId))
          return false;
        if (!this.dockerClusterId.equals(that.dockerClusterId))
          return false;
      }

      boolean this_present_brain1 = true && this.isSetBrain1();
      boolean that_present_brain1 = true && that.isSetBrain1();
      if (this_present_brain1 || that_present_brain1) {
        if (!(this_present_brain1 && that_present_brain1))
          return false;
        if (!this.brain1.equals(that.brain1))
          return false;
      }

      boolean this_present_brain2 = true && this.isSetBrain2();
      boolean that_present_brain2 = true && that.isSetBrain2();
      if (this_present_brain2 || that_present_brain2) {
        if (!(this_present_brain2 && that_present_brain2))
          return false;
        if (!this.brain2.equals(that.brain2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerClusterId()) ? 131071 : 524287);
      if (isSetDockerClusterId())
        hashCode = hashCode * 8191 + dockerClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBrain1()) ? 131071 : 524287);
      if (isSetBrain1())
        hashCode = hashCode * 8191 + brain1.hashCode();

      hashCode = hashCode * 8191 + ((isSetBrain2()) ? 131071 : 524287);
      if (isSetBrain2())
        hashCode = hashCode * 8191 + brain2.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(splitClusterAs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerClusterId(), other.isSetDockerClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerClusterId, other.dockerClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBrain1(), other.isSetBrain1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrain1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brain1, other.brain1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetBrain2(), other.isSetBrain2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBrain2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.brain2, other.brain2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("splitClusterAs_args(");
      boolean first = true;

      sb.append("dockerClusterId:");
      if (this.dockerClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("brain1:");
      if (this.brain1 == null) {
        sb.append("null");
      } else {
        sb.append(this.brain1);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("brain2:");
      if (this.brain2 == null) {
        sb.append("null");
      } else {
        sb.append(this.brain2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class splitClusterAs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public splitClusterAs_argsStandardScheme getScheme() {
        return new splitClusterAs_argsStandardScheme();
      }
    }

    private static class splitClusterAs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<splitClusterAs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, splitClusterAs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerClusterId = iprot.readString();
                struct.setDockerClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BRAIN1
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.brain1 = new java.util.ArrayList<java.lang.String>(_list0.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.brain1.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setBrain1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // BRAIN2
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                  struct.brain2 = new java.util.ArrayList<java.lang.String>(_list3.size);
                  @org.apache.thrift.annotation.Nullable java.lang.String _elem4;
                  for (int _i5 = 0; _i5 < _list3.size; ++_i5)
                  {
                    _elem4 = iprot.readString();
                    struct.brain2.add(_elem4);
                  }
                  iprot.readListEnd();
                }
                struct.setBrain2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, splitClusterAs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerClusterId != null) {
          oprot.writeFieldBegin(DOCKER_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.dockerClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.brain1 != null) {
          oprot.writeFieldBegin(BRAIN1_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.brain1.size()));
            for (java.lang.String _iter6 : struct.brain1)
            {
              oprot.writeString(_iter6);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.brain2 != null) {
          oprot.writeFieldBegin(BRAIN2_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.brain2.size()));
            for (java.lang.String _iter7 : struct.brain2)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class splitClusterAs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public splitClusterAs_argsTupleScheme getScheme() {
        return new splitClusterAs_argsTupleScheme();
      }
    }

    private static class splitClusterAs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<splitClusterAs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, splitClusterAs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetBrain1()) {
          optionals.set(1);
        }
        if (struct.isSetBrain2()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetDockerClusterId()) {
          oprot.writeString(struct.dockerClusterId);
        }
        if (struct.isSetBrain1()) {
          {
            oprot.writeI32(struct.brain1.size());
            for (java.lang.String _iter8 : struct.brain1)
            {
              oprot.writeString(_iter8);
            }
          }
        }
        if (struct.isSetBrain2()) {
          {
            oprot.writeI32(struct.brain2.size());
            for (java.lang.String _iter9 : struct.brain2)
            {
              oprot.writeString(_iter9);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, splitClusterAs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.dockerClusterId = iprot.readString();
          struct.setDockerClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list10 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.brain1 = new java.util.ArrayList<java.lang.String>(_list10.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem11;
            for (int _i12 = 0; _i12 < _list10.size; ++_i12)
            {
              _elem11 = iprot.readString();
              struct.brain1.add(_elem11);
            }
          }
          struct.setBrain1IsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TList _list13 = iprot.readListBegin(org.apache.thrift.protocol.TType.STRING);
            struct.brain2 = new java.util.ArrayList<java.lang.String>(_list13.size);
            @org.apache.thrift.annotation.Nullable java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.brain2.add(_elem14);
            }
          }
          struct.setBrain2IsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class splitClusterAs_result implements org.apache.thrift.TBase<splitClusterAs_result, splitClusterAs_result._Fields>, java.io.Serializable, Cloneable, Comparable<splitClusterAs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("splitClusterAs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new splitClusterAs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new splitClusterAs_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(splitClusterAs_result.class, metaDataMap);
    }

    public splitClusterAs_result() {
    }

    public splitClusterAs_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public splitClusterAs_result(splitClusterAs_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public splitClusterAs_result deepCopy() {
      return new splitClusterAs_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public splitClusterAs_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof splitClusterAs_result)
        return this.equals((splitClusterAs_result)that);
      return false;
    }

    public boolean equals(splitClusterAs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(splitClusterAs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("splitClusterAs_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class splitClusterAs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public splitClusterAs_resultStandardScheme getScheme() {
        return new splitClusterAs_resultStandardScheme();
      }
    }

    private static class splitClusterAs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<splitClusterAs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, splitClusterAs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, splitClusterAs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class splitClusterAs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public splitClusterAs_resultTupleScheme getScheme() {
        return new splitClusterAs_resultTupleScheme();
      }
    }

    private static class splitClusterAs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<splitClusterAs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, splitClusterAs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, splitClusterAs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mergeCluster_args implements org.apache.thrift.TBase<mergeCluster_args, mergeCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<mergeCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeCluster_args");

    private static final org.apache.thrift.protocol.TField DOCKER_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dockerClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mergeCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mergeCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DOCKER_CLUSTER_ID((short)1, "dockerClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DOCKER_CLUSTER_ID
            return DOCKER_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DOCKER_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("dockerClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeCluster_args.class, metaDataMap);
    }

    public mergeCluster_args() {
    }

    public mergeCluster_args(
      java.lang.String dockerClusterId)
    {
      this();
      this.dockerClusterId = dockerClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeCluster_args(mergeCluster_args other) {
      if (other.isSetDockerClusterId()) {
        this.dockerClusterId = other.dockerClusterId;
      }
    }

    public mergeCluster_args deepCopy() {
      return new mergeCluster_args(this);
    }

    @Override
    public void clear() {
      this.dockerClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getDockerClusterId() {
      return this.dockerClusterId;
    }

    public mergeCluster_args setDockerClusterId(@org.apache.thrift.annotation.Nullable java.lang.String dockerClusterId) {
      this.dockerClusterId = dockerClusterId;
      return this;
    }

    public void unsetDockerClusterId() {
      this.dockerClusterId = null;
    }

    /** Returns true if field dockerClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetDockerClusterId() {
      return this.dockerClusterId != null;
    }

    public void setDockerClusterIdIsSet(boolean value) {
      if (!value) {
        this.dockerClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        if (value == null) {
          unsetDockerClusterId();
        } else {
          setDockerClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DOCKER_CLUSTER_ID:
        return getDockerClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DOCKER_CLUSTER_ID:
        return isSetDockerClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mergeCluster_args)
        return this.equals((mergeCluster_args)that);
      return false;
    }

    public boolean equals(mergeCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_dockerClusterId = true && this.isSetDockerClusterId();
      boolean that_present_dockerClusterId = true && that.isSetDockerClusterId();
      if (this_present_dockerClusterId || that_present_dockerClusterId) {
        if (!(this_present_dockerClusterId && that_present_dockerClusterId))
          return false;
        if (!this.dockerClusterId.equals(that.dockerClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDockerClusterId()) ? 131071 : 524287);
      if (isSetDockerClusterId())
        hashCode = hashCode * 8191 + dockerClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mergeCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetDockerClusterId(), other.isSetDockerClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDockerClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dockerClusterId, other.dockerClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mergeCluster_args(");
      boolean first = true;

      sb.append("dockerClusterId:");
      if (this.dockerClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.dockerClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mergeCluster_argsStandardScheme getScheme() {
        return new mergeCluster_argsStandardScheme();
      }
    }

    private static class mergeCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mergeCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DOCKER_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dockerClusterId = iprot.readString();
                struct.setDockerClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.dockerClusterId != null) {
          oprot.writeFieldBegin(DOCKER_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.dockerClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mergeCluster_argsTupleScheme getScheme() {
        return new mergeCluster_argsTupleScheme();
      }
    }

    private static class mergeCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mergeCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDockerClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDockerClusterId()) {
          oprot.writeString(struct.dockerClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dockerClusterId = iprot.readString();
          struct.setDockerClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mergeCluster_result implements org.apache.thrift.TBase<mergeCluster_result, mergeCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<mergeCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mergeCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mergeCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mergeCluster_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mergeCluster_result.class, metaDataMap);
    }

    public mergeCluster_result() {
    }

    public mergeCluster_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mergeCluster_result(mergeCluster_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public mergeCluster_result deepCopy() {
      return new mergeCluster_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public mergeCluster_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof mergeCluster_result)
        return this.equals((mergeCluster_result)that);
      return false;
    }

    public boolean equals(mergeCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(mergeCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mergeCluster_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mergeCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mergeCluster_resultStandardScheme getScheme() {
        return new mergeCluster_resultStandardScheme();
      }
    }

    private static class mergeCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mergeCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mergeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mergeCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mergeCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mergeCluster_resultTupleScheme getScheme() {
        return new mergeCluster_resultTupleScheme();
      }
    }

    private static class mergeCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mergeCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mergeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mergeCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginToCloudUsingEnvironment_args implements org.apache.thrift.TBase<loginToCloudUsingEnvironment_args, loginToCloudUsingEnvironment_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginToCloudUsingEnvironment_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginToCloudUsingEnvironment_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginToCloudUsingEnvironment_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginToCloudUsingEnvironment_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginToCloudUsingEnvironment_args.class, metaDataMap);
    }

    public loginToCloudUsingEnvironment_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginToCloudUsingEnvironment_args(loginToCloudUsingEnvironment_args other) {
    }

    public loginToCloudUsingEnvironment_args deepCopy() {
      return new loginToCloudUsingEnvironment_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginToCloudUsingEnvironment_args)
        return this.equals((loginToCloudUsingEnvironment_args)that);
      return false;
    }

    public boolean equals(loginToCloudUsingEnvironment_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(loginToCloudUsingEnvironment_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginToCloudUsingEnvironment_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginToCloudUsingEnvironment_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloudUsingEnvironment_argsStandardScheme getScheme() {
        return new loginToCloudUsingEnvironment_argsStandardScheme();
      }
    }

    private static class loginToCloudUsingEnvironment_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginToCloudUsingEnvironment_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginToCloudUsingEnvironment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginToCloudUsingEnvironment_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginToCloudUsingEnvironment_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloudUsingEnvironment_argsTupleScheme getScheme() {
        return new loginToCloudUsingEnvironment_argsTupleScheme();
      }
    }

    private static class loginToCloudUsingEnvironment_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginToCloudUsingEnvironment_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginToCloudUsingEnvironment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginToCloudUsingEnvironment_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginToCloudUsingEnvironment_result implements org.apache.thrift.TBase<loginToCloudUsingEnvironment_result, loginToCloudUsingEnvironment_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginToCloudUsingEnvironment_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginToCloudUsingEnvironment_result");

    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginToCloudUsingEnvironment_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginToCloudUsingEnvironment_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginToCloudUsingEnvironment_result.class, metaDataMap);
    }

    public loginToCloudUsingEnvironment_result() {
    }

    public loginToCloudUsingEnvironment_result(
      CloudException cloudException)
    {
      this();
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginToCloudUsingEnvironment_result(loginToCloudUsingEnvironment_result other) {
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public loginToCloudUsingEnvironment_result deepCopy() {
      return new loginToCloudUsingEnvironment_result(this);
    }

    @Override
    public void clear() {
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public loginToCloudUsingEnvironment_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginToCloudUsingEnvironment_result)
        return this.equals((loginToCloudUsingEnvironment_result)that);
      return false;
    }

    public boolean equals(loginToCloudUsingEnvironment_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginToCloudUsingEnvironment_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginToCloudUsingEnvironment_result(");
      boolean first = true;

      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginToCloudUsingEnvironment_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloudUsingEnvironment_resultStandardScheme getScheme() {
        return new loginToCloudUsingEnvironment_resultStandardScheme();
      }
    }

    private static class loginToCloudUsingEnvironment_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginToCloudUsingEnvironment_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginToCloudUsingEnvironment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginToCloudUsingEnvironment_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginToCloudUsingEnvironment_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloudUsingEnvironment_resultTupleScheme getScheme() {
        return new loginToCloudUsingEnvironment_resultTupleScheme();
      }
    }

    private static class loginToCloudUsingEnvironment_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginToCloudUsingEnvironment_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginToCloudUsingEnvironment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginToCloudUsingEnvironment_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginToCloud_args implements org.apache.thrift.TBase<loginToCloud_args, loginToCloud_args._Fields>, java.io.Serializable, Cloneable, Comparable<loginToCloud_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginToCloud_args");

    private static final org.apache.thrift.protocol.TField BASE_URL_FIELD_DESC = new org.apache.thrift.protocol.TField("baseUrl", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField API_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("apiKey", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField API_SECRET_FIELD_DESC = new org.apache.thrift.protocol.TField("apiSecret", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginToCloud_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginToCloud_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String baseUrl; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String apiKey; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String apiSecret; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      BASE_URL((short)1, "baseUrl"),
      API_KEY((short)2, "apiKey"),
      API_SECRET((short)3, "apiSecret");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BASE_URL
            return BASE_URL;
          case 2: // API_KEY
            return API_KEY;
          case 3: // API_SECRET
            return API_SECRET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BASE_URL, new org.apache.thrift.meta_data.FieldMetaData("baseUrl", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_KEY, new org.apache.thrift.meta_data.FieldMetaData("apiKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.API_SECRET, new org.apache.thrift.meta_data.FieldMetaData("apiSecret", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginToCloud_args.class, metaDataMap);
    }

    public loginToCloud_args() {
    }

    public loginToCloud_args(
      java.lang.String baseUrl,
      java.lang.String apiKey,
      java.lang.String apiSecret)
    {
      this();
      this.baseUrl = baseUrl;
      this.apiKey = apiKey;
      this.apiSecret = apiSecret;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginToCloud_args(loginToCloud_args other) {
      if (other.isSetBaseUrl()) {
        this.baseUrl = other.baseUrl;
      }
      if (other.isSetApiKey()) {
        this.apiKey = other.apiKey;
      }
      if (other.isSetApiSecret()) {
        this.apiSecret = other.apiSecret;
      }
    }

    public loginToCloud_args deepCopy() {
      return new loginToCloud_args(this);
    }

    @Override
    public void clear() {
      this.baseUrl = null;
      this.apiKey = null;
      this.apiSecret = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getBaseUrl() {
      return this.baseUrl;
    }

    public loginToCloud_args setBaseUrl(@org.apache.thrift.annotation.Nullable java.lang.String baseUrl) {
      this.baseUrl = baseUrl;
      return this;
    }

    public void unsetBaseUrl() {
      this.baseUrl = null;
    }

    /** Returns true if field baseUrl is set (has been assigned a value) and false otherwise */
    public boolean isSetBaseUrl() {
      return this.baseUrl != null;
    }

    public void setBaseUrlIsSet(boolean value) {
      if (!value) {
        this.baseUrl = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApiKey() {
      return this.apiKey;
    }

    public loginToCloud_args setApiKey(@org.apache.thrift.annotation.Nullable java.lang.String apiKey) {
      this.apiKey = apiKey;
      return this;
    }

    public void unsetApiKey() {
      this.apiKey = null;
    }

    /** Returns true if field apiKey is set (has been assigned a value) and false otherwise */
    public boolean isSetApiKey() {
      return this.apiKey != null;
    }

    public void setApiKeyIsSet(boolean value) {
      if (!value) {
        this.apiKey = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getApiSecret() {
      return this.apiSecret;
    }

    public loginToCloud_args setApiSecret(@org.apache.thrift.annotation.Nullable java.lang.String apiSecret) {
      this.apiSecret = apiSecret;
      return this;
    }

    public void unsetApiSecret() {
      this.apiSecret = null;
    }

    /** Returns true if field apiSecret is set (has been assigned a value) and false otherwise */
    public boolean isSetApiSecret() {
      return this.apiSecret != null;
    }

    public void setApiSecretIsSet(boolean value) {
      if (!value) {
        this.apiSecret = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case BASE_URL:
        if (value == null) {
          unsetBaseUrl();
        } else {
          setBaseUrl((java.lang.String)value);
        }
        break;

      case API_KEY:
        if (value == null) {
          unsetApiKey();
        } else {
          setApiKey((java.lang.String)value);
        }
        break;

      case API_SECRET:
        if (value == null) {
          unsetApiSecret();
        } else {
          setApiSecret((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case BASE_URL:
        return getBaseUrl();

      case API_KEY:
        return getApiKey();

      case API_SECRET:
        return getApiSecret();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case BASE_URL:
        return isSetBaseUrl();
      case API_KEY:
        return isSetApiKey();
      case API_SECRET:
        return isSetApiSecret();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginToCloud_args)
        return this.equals((loginToCloud_args)that);
      return false;
    }

    public boolean equals(loginToCloud_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_baseUrl = true && this.isSetBaseUrl();
      boolean that_present_baseUrl = true && that.isSetBaseUrl();
      if (this_present_baseUrl || that_present_baseUrl) {
        if (!(this_present_baseUrl && that_present_baseUrl))
          return false;
        if (!this.baseUrl.equals(that.baseUrl))
          return false;
      }

      boolean this_present_apiKey = true && this.isSetApiKey();
      boolean that_present_apiKey = true && that.isSetApiKey();
      if (this_present_apiKey || that_present_apiKey) {
        if (!(this_present_apiKey && that_present_apiKey))
          return false;
        if (!this.apiKey.equals(that.apiKey))
          return false;
      }

      boolean this_present_apiSecret = true && this.isSetApiSecret();
      boolean that_present_apiSecret = true && that.isSetApiSecret();
      if (this_present_apiSecret || that_present_apiSecret) {
        if (!(this_present_apiSecret && that_present_apiSecret))
          return false;
        if (!this.apiSecret.equals(that.apiSecret))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetBaseUrl()) ? 131071 : 524287);
      if (isSetBaseUrl())
        hashCode = hashCode * 8191 + baseUrl.hashCode();

      hashCode = hashCode * 8191 + ((isSetApiKey()) ? 131071 : 524287);
      if (isSetApiKey())
        hashCode = hashCode * 8191 + apiKey.hashCode();

      hashCode = hashCode * 8191 + ((isSetApiSecret()) ? 131071 : 524287);
      if (isSetApiSecret())
        hashCode = hashCode * 8191 + apiSecret.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginToCloud_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetBaseUrl(), other.isSetBaseUrl());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBaseUrl()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.baseUrl, other.baseUrl);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApiKey(), other.isSetApiKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiKey, other.apiKey);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetApiSecret(), other.isSetApiSecret());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApiSecret()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apiSecret, other.apiSecret);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginToCloud_args(");
      boolean first = true;

      sb.append("baseUrl:");
      if (this.baseUrl == null) {
        sb.append("null");
      } else {
        sb.append(this.baseUrl);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiKey:");
      if (this.apiKey == null) {
        sb.append("null");
      } else {
        sb.append(this.apiKey);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apiSecret:");
      if (this.apiSecret == null) {
        sb.append("null");
      } else {
        sb.append(this.apiSecret);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginToCloud_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloud_argsStandardScheme getScheme() {
        return new loginToCloud_argsStandardScheme();
      }
    }

    private static class loginToCloud_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginToCloud_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginToCloud_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BASE_URL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.baseUrl = iprot.readString();
                struct.setBaseUrlIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // API_KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiKey = iprot.readString();
                struct.setApiKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // API_SECRET
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apiSecret = iprot.readString();
                struct.setApiSecretIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginToCloud_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.baseUrl != null) {
          oprot.writeFieldBegin(BASE_URL_FIELD_DESC);
          oprot.writeString(struct.baseUrl);
          oprot.writeFieldEnd();
        }
        if (struct.apiKey != null) {
          oprot.writeFieldBegin(API_KEY_FIELD_DESC);
          oprot.writeString(struct.apiKey);
          oprot.writeFieldEnd();
        }
        if (struct.apiSecret != null) {
          oprot.writeFieldBegin(API_SECRET_FIELD_DESC);
          oprot.writeString(struct.apiSecret);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginToCloud_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloud_argsTupleScheme getScheme() {
        return new loginToCloud_argsTupleScheme();
      }
    }

    private static class loginToCloud_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginToCloud_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginToCloud_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetBaseUrl()) {
          optionals.set(0);
        }
        if (struct.isSetApiKey()) {
          optionals.set(1);
        }
        if (struct.isSetApiSecret()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetBaseUrl()) {
          oprot.writeString(struct.baseUrl);
        }
        if (struct.isSetApiKey()) {
          oprot.writeString(struct.apiKey);
        }
        if (struct.isSetApiSecret()) {
          oprot.writeString(struct.apiSecret);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginToCloud_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.baseUrl = iprot.readString();
          struct.setBaseUrlIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apiKey = iprot.readString();
          struct.setApiKeyIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apiSecret = iprot.readString();
          struct.setApiSecretIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class loginToCloud_result implements org.apache.thrift.TBase<loginToCloud_result, loginToCloud_result._Fields>, java.io.Serializable, Cloneable, Comparable<loginToCloud_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("loginToCloud_result");

    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new loginToCloud_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new loginToCloud_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(loginToCloud_result.class, metaDataMap);
    }

    public loginToCloud_result() {
    }

    public loginToCloud_result(
      CloudException cloudException)
    {
      this();
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public loginToCloud_result(loginToCloud_result other) {
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public loginToCloud_result deepCopy() {
      return new loginToCloud_result(this);
    }

    @Override
    public void clear() {
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public loginToCloud_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof loginToCloud_result)
        return this.equals((loginToCloud_result)that);
      return false;
    }

    public boolean equals(loginToCloud_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(loginToCloud_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("loginToCloud_result(");
      boolean first = true;

      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class loginToCloud_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloud_resultStandardScheme getScheme() {
        return new loginToCloud_resultStandardScheme();
      }
    }

    private static class loginToCloud_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<loginToCloud_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, loginToCloud_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, loginToCloud_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class loginToCloud_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public loginToCloud_resultTupleScheme getScheme() {
        return new loginToCloud_resultTupleScheme();
      }
    }

    private static class loginToCloud_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<loginToCloud_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, loginToCloud_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, loginToCloud_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCloudCluster_args implements org.apache.thrift.TBase<createCloudCluster_args, createCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<createCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCloudCluster_args");

    private static final org.apache.thrift.protocol.TField HAZELCAST_VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("hazelcastVersion", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IS_TLS_ENABLED_FIELD_DESC = new org.apache.thrift.protocol.TField("isTlsEnabled", org.apache.thrift.protocol.TType.BOOL, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCloudCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String hazelcastVersion; // required
    public boolean isTlsEnabled; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      HAZELCAST_VERSION((short)1, "hazelcastVersion"),
      IS_TLS_ENABLED((short)2, "isTlsEnabled");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HAZELCAST_VERSION
            return HAZELCAST_VERSION;
          case 2: // IS_TLS_ENABLED
            return IS_TLS_ENABLED;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ISTLSENABLED_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HAZELCAST_VERSION, new org.apache.thrift.meta_data.FieldMetaData("hazelcastVersion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IS_TLS_ENABLED, new org.apache.thrift.meta_data.FieldMetaData("isTlsEnabled", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCloudCluster_args.class, metaDataMap);
    }

    public createCloudCluster_args() {
    }

    public createCloudCluster_args(
      java.lang.String hazelcastVersion,
      boolean isTlsEnabled)
    {
      this();
      this.hazelcastVersion = hazelcastVersion;
      this.isTlsEnabled = isTlsEnabled;
      setIsTlsEnabledIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCloudCluster_args(createCloudCluster_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetHazelcastVersion()) {
        this.hazelcastVersion = other.hazelcastVersion;
      }
      this.isTlsEnabled = other.isTlsEnabled;
    }

    public createCloudCluster_args deepCopy() {
      return new createCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.hazelcastVersion = null;
      setIsTlsEnabledIsSet(false);
      this.isTlsEnabled = false;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getHazelcastVersion() {
      return this.hazelcastVersion;
    }

    public createCloudCluster_args setHazelcastVersion(@org.apache.thrift.annotation.Nullable java.lang.String hazelcastVersion) {
      this.hazelcastVersion = hazelcastVersion;
      return this;
    }

    public void unsetHazelcastVersion() {
      this.hazelcastVersion = null;
    }

    /** Returns true if field hazelcastVersion is set (has been assigned a value) and false otherwise */
    public boolean isSetHazelcastVersion() {
      return this.hazelcastVersion != null;
    }

    public void setHazelcastVersionIsSet(boolean value) {
      if (!value) {
        this.hazelcastVersion = null;
      }
    }

    public boolean isIsTlsEnabled() {
      return this.isTlsEnabled;
    }

    public createCloudCluster_args setIsTlsEnabled(boolean isTlsEnabled) {
      this.isTlsEnabled = isTlsEnabled;
      setIsTlsEnabledIsSet(true);
      return this;
    }

    public void unsetIsTlsEnabled() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID);
    }

    /** Returns true if field isTlsEnabled is set (has been assigned a value) and false otherwise */
    public boolean isSetIsTlsEnabled() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID);
    }

    public void setIsTlsEnabledIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISTLSENABLED_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case HAZELCAST_VERSION:
        if (value == null) {
          unsetHazelcastVersion();
        } else {
          setHazelcastVersion((java.lang.String)value);
        }
        break;

      case IS_TLS_ENABLED:
        if (value == null) {
          unsetIsTlsEnabled();
        } else {
          setIsTlsEnabled((java.lang.Boolean)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case HAZELCAST_VERSION:
        return getHazelcastVersion();

      case IS_TLS_ENABLED:
        return isIsTlsEnabled();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case HAZELCAST_VERSION:
        return isSetHazelcastVersion();
      case IS_TLS_ENABLED:
        return isSetIsTlsEnabled();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createCloudCluster_args)
        return this.equals((createCloudCluster_args)that);
      return false;
    }

    public boolean equals(createCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_hazelcastVersion = true && this.isSetHazelcastVersion();
      boolean that_present_hazelcastVersion = true && that.isSetHazelcastVersion();
      if (this_present_hazelcastVersion || that_present_hazelcastVersion) {
        if (!(this_present_hazelcastVersion && that_present_hazelcastVersion))
          return false;
        if (!this.hazelcastVersion.equals(that.hazelcastVersion))
          return false;
      }

      boolean this_present_isTlsEnabled = true;
      boolean that_present_isTlsEnabled = true;
      if (this_present_isTlsEnabled || that_present_isTlsEnabled) {
        if (!(this_present_isTlsEnabled && that_present_isTlsEnabled))
          return false;
        if (this.isTlsEnabled != that.isTlsEnabled)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetHazelcastVersion()) ? 131071 : 524287);
      if (isSetHazelcastVersion())
        hashCode = hashCode * 8191 + hazelcastVersion.hashCode();

      hashCode = hashCode * 8191 + ((isTlsEnabled) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(createCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetHazelcastVersion(), other.isSetHazelcastVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHazelcastVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hazelcastVersion, other.hazelcastVersion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetIsTlsEnabled(), other.isSetIsTlsEnabled());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsTlsEnabled()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isTlsEnabled, other.isTlsEnabled);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCloudCluster_args(");
      boolean first = true;

      sb.append("hazelcastVersion:");
      if (this.hazelcastVersion == null) {
        sb.append("null");
      } else {
        sb.append(this.hazelcastVersion);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("isTlsEnabled:");
      sb.append(this.isTlsEnabled);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCloudCluster_argsStandardScheme getScheme() {
        return new createCloudCluster_argsStandardScheme();
      }
    }

    private static class createCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HAZELCAST_VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hazelcastVersion = iprot.readString();
                struct.setHazelcastVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IS_TLS_ENABLED
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isTlsEnabled = iprot.readBool();
                struct.setIsTlsEnabledIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hazelcastVersion != null) {
          oprot.writeFieldBegin(HAZELCAST_VERSION_FIELD_DESC);
          oprot.writeString(struct.hazelcastVersion);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(IS_TLS_ENABLED_FIELD_DESC);
        oprot.writeBool(struct.isTlsEnabled);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCloudCluster_argsTupleScheme getScheme() {
        return new createCloudCluster_argsTupleScheme();
      }
    }

    private static class createCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetHazelcastVersion()) {
          optionals.set(0);
        }
        if (struct.isSetIsTlsEnabled()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetHazelcastVersion()) {
          oprot.writeString(struct.hazelcastVersion);
        }
        if (struct.isSetIsTlsEnabled()) {
          oprot.writeBool(struct.isTlsEnabled);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.hazelcastVersion = iprot.readString();
          struct.setHazelcastVersionIsSet(true);
        }
        if (incoming.get(1)) {
          struct.isTlsEnabled = iprot.readBool();
          struct.setIsTlsEnabledIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createCloudCluster_result implements org.apache.thrift.TBase<createCloudCluster_result, createCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<createCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createCloudCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createCloudCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudCluster success; // required
    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudCluster.class)));
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createCloudCluster_result.class, metaDataMap);
    }

    public createCloudCluster_result() {
    }

    public createCloudCluster_result(
      CloudCluster success,
      CloudException cloudException)
    {
      this();
      this.success = success;
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createCloudCluster_result(createCloudCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new CloudCluster(other.success);
      }
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public createCloudCluster_result deepCopy() {
      return new createCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudCluster getSuccess() {
      return this.success;
    }

    public createCloudCluster_result setSuccess(@org.apache.thrift.annotation.Nullable CloudCluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public createCloudCluster_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CloudCluster)value);
        }
        break;

      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof createCloudCluster_result)
        return this.equals((createCloudCluster_result)that);
      return false;
    }

    public boolean equals(createCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createCloudCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCloudCluster_resultStandardScheme getScheme() {
        return new createCloudCluster_resultStandardScheme();
      }
    }

    private static class createCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CloudCluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createCloudCluster_resultTupleScheme getScheme() {
        return new createCloudCluster_resultTupleScheme();
      }
    }

    private static class createCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCloudException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CloudCluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCloudCluster_args implements org.apache.thrift.TBase<getCloudCluster_args, getCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudCluster_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCloudCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudCluster_args.class, metaDataMap);
    }

    public getCloudCluster_args() {
    }

    public getCloudCluster_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudCluster_args(getCloudCluster_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public getCloudCluster_args deepCopy() {
      return new getCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public getCloudCluster_args setCloudClusterId(@org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
      return this;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCloudCluster_args)
        return this.equals((getCloudCluster_args)that);
      return false;
    }

    public boolean equals(getCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudClusterId(), other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCloudCluster_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCloudCluster_argsStandardScheme getScheme() {
        return new getCloudCluster_argsStandardScheme();
      }
    }

    private static class getCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCloudCluster_argsTupleScheme getScheme() {
        return new getCloudCluster_argsTupleScheme();
      }
    }

    private static class getCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCloudCluster_result implements org.apache.thrift.TBase<getCloudCluster_result, getCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCloudCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCloudCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudCluster success; // required
    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudCluster.class)));
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCloudCluster_result.class, metaDataMap);
    }

    public getCloudCluster_result() {
    }

    public getCloudCluster_result(
      CloudCluster success,
      CloudException cloudException)
    {
      this();
      this.success = success;
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCloudCluster_result(getCloudCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new CloudCluster(other.success);
      }
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public getCloudCluster_result deepCopy() {
      return new getCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudCluster getSuccess() {
      return this.success;
    }

    public getCloudCluster_result setSuccess(@org.apache.thrift.annotation.Nullable CloudCluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public getCloudCluster_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CloudCluster)value);
        }
        break;

      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof getCloudCluster_result)
        return this.equals((getCloudCluster_result)that);
      return false;
    }

    public boolean equals(getCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCloudCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCloudCluster_resultStandardScheme getScheme() {
        return new getCloudCluster_resultStandardScheme();
      }
    }

    private static class getCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CloudCluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCloudCluster_resultTupleScheme getScheme() {
        return new getCloudCluster_resultTupleScheme();
      }
    }

    private static class getCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCloudException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CloudCluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopCloudCluster_args implements org.apache.thrift.TBase<stopCloudCluster_args, stopCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<stopCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopCloudCluster_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopCloudCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopCloudCluster_args.class, metaDataMap);
    }

    public stopCloudCluster_args() {
    }

    public stopCloudCluster_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopCloudCluster_args(stopCloudCluster_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public stopCloudCluster_args deepCopy() {
      return new stopCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public stopCloudCluster_args setCloudClusterId(@org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
      return this;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof stopCloudCluster_args)
        return this.equals((stopCloudCluster_args)that);
      return false;
    }

    public boolean equals(stopCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stopCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudClusterId(), other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stopCloudCluster_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopCloudCluster_argsStandardScheme getScheme() {
        return new stopCloudCluster_argsStandardScheme();
      }
    }

    private static class stopCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopCloudCluster_argsTupleScheme getScheme() {
        return new stopCloudCluster_argsTupleScheme();
      }
    }

    private static class stopCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class stopCloudCluster_result implements org.apache.thrift.TBase<stopCloudCluster_result, stopCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<stopCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stopCloudCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new stopCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new stopCloudCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudCluster success; // required
    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudCluster.class)));
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stopCloudCluster_result.class, metaDataMap);
    }

    public stopCloudCluster_result() {
    }

    public stopCloudCluster_result(
      CloudCluster success,
      CloudException cloudException)
    {
      this();
      this.success = success;
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stopCloudCluster_result(stopCloudCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new CloudCluster(other.success);
      }
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public stopCloudCluster_result deepCopy() {
      return new stopCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudCluster getSuccess() {
      return this.success;
    }

    public stopCloudCluster_result setSuccess(@org.apache.thrift.annotation.Nullable CloudCluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public stopCloudCluster_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CloudCluster)value);
        }
        break;

      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof stopCloudCluster_result)
        return this.equals((stopCloudCluster_result)that);
      return false;
    }

    public boolean equals(stopCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(stopCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("stopCloudCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stopCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopCloudCluster_resultStandardScheme getScheme() {
        return new stopCloudCluster_resultStandardScheme();
      }
    }

    private static class stopCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<stopCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stopCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CloudCluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stopCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stopCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public stopCloudCluster_resultTupleScheme getScheme() {
        return new stopCloudCluster_resultTupleScheme();
      }
    }

    private static class stopCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<stopCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stopCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCloudException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stopCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CloudCluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeCloudCluster_args implements org.apache.thrift.TBase<resumeCloudCluster_args, resumeCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<resumeCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeCloudCluster_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeCloudCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeCloudCluster_args.class, metaDataMap);
    }

    public resumeCloudCluster_args() {
    }

    public resumeCloudCluster_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeCloudCluster_args(resumeCloudCluster_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public resumeCloudCluster_args deepCopy() {
      return new resumeCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public resumeCloudCluster_args setCloudClusterId(@org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
      return this;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof resumeCloudCluster_args)
        return this.equals((resumeCloudCluster_args)that);
      return false;
    }

    public boolean equals(resumeCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(resumeCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudClusterId(), other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeCloudCluster_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeCloudCluster_argsStandardScheme getScheme() {
        return new resumeCloudCluster_argsStandardScheme();
      }
    }

    private static class resumeCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeCloudCluster_argsTupleScheme getScheme() {
        return new resumeCloudCluster_argsTupleScheme();
      }
    }

    private static class resumeCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class resumeCloudCluster_result implements org.apache.thrift.TBase<resumeCloudCluster_result, resumeCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<resumeCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("resumeCloudCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new resumeCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new resumeCloudCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudCluster success; // required
    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudCluster.class)));
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(resumeCloudCluster_result.class, metaDataMap);
    }

    public resumeCloudCluster_result() {
    }

    public resumeCloudCluster_result(
      CloudCluster success,
      CloudException cloudException)
    {
      this();
      this.success = success;
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public resumeCloudCluster_result(resumeCloudCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = new CloudCluster(other.success);
      }
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public resumeCloudCluster_result deepCopy() {
      return new resumeCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudCluster getSuccess() {
      return this.success;
    }

    public resumeCloudCluster_result setSuccess(@org.apache.thrift.annotation.Nullable CloudCluster success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public resumeCloudCluster_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((CloudCluster)value);
        }
        break;

      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof resumeCloudCluster_result)
        return this.equals((resumeCloudCluster_result)that);
      return false;
    }

    public boolean equals(resumeCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(resumeCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("resumeCloudCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class resumeCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeCloudCluster_resultStandardScheme getScheme() {
        return new resumeCloudCluster_resultStandardScheme();
      }
    }

    private static class resumeCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<resumeCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, resumeCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new CloudCluster();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, resumeCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class resumeCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public resumeCloudCluster_resultTupleScheme getScheme() {
        return new resumeCloudCluster_resultTupleScheme();
      }
    }

    private static class resumeCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<resumeCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, resumeCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetCloudException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, resumeCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new CloudCluster();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCloudCluster_args implements org.apache.thrift.TBase<deleteCloudCluster_args, deleteCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCloudCluster_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCloudCluster_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCloudCluster_args.class, metaDataMap);
    }

    public deleteCloudCluster_args() {
    }

    public deleteCloudCluster_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCloudCluster_args(deleteCloudCluster_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public deleteCloudCluster_args deepCopy() {
      return new deleteCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public deleteCloudCluster_args setCloudClusterId(@org.apache.thrift.annotation.Nullable java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
      return this;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteCloudCluster_args)
        return this.equals((deleteCloudCluster_args)that);
      return false;
    }

    public boolean equals(deleteCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudClusterId(), other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCloudCluster_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCloudCluster_argsStandardScheme getScheme() {
        return new deleteCloudCluster_argsStandardScheme();
      }
    }

    private static class deleteCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCloudCluster_argsTupleScheme getScheme() {
        return new deleteCloudCluster_argsTupleScheme();
      }
    }

    private static class deleteCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteCloudCluster_result implements org.apache.thrift.TBase<deleteCloudCluster_result, deleteCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteCloudCluster_result");

    private static final org.apache.thrift.protocol.TField CLOUD_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteCloudCluster_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable CloudException cloudException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_EXCEPTION((short)1, "cloudException");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_EXCEPTION
            return CLOUD_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("cloudException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CloudException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteCloudCluster_result.class, metaDataMap);
    }

    public deleteCloudCluster_result() {
    }

    public deleteCloudCluster_result(
      CloudException cloudException)
    {
      this();
      this.cloudException = cloudException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteCloudCluster_result(deleteCloudCluster_result other) {
      if (other.isSetCloudException()) {
        this.cloudException = new CloudException(other.cloudException);
      }
    }

    public deleteCloudCluster_result deepCopy() {
      return new deleteCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.cloudException = null;
    }

    @org.apache.thrift.annotation.Nullable
    public CloudException getCloudException() {
      return this.cloudException;
    }

    public deleteCloudCluster_result setCloudException(@org.apache.thrift.annotation.Nullable CloudException cloudException) {
      this.cloudException = cloudException;
      return this;
    }

    public void unsetCloudException() {
      this.cloudException = null;
    }

    /** Returns true if field cloudException is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudException() {
      return this.cloudException != null;
    }

    public void setCloudExceptionIsSet(boolean value) {
      if (!value) {
        this.cloudException = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLOUD_EXCEPTION:
        if (value == null) {
          unsetCloudException();
        } else {
          setCloudException((CloudException)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_EXCEPTION:
        return getCloudException();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_EXCEPTION:
        return isSetCloudException();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof deleteCloudCluster_result)
        return this.equals((deleteCloudCluster_result)that);
      return false;
    }

    public boolean equals(deleteCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudException = true && this.isSetCloudException();
      boolean that_present_cloudException = true && that.isSetCloudException();
      if (this_present_cloudException || that_present_cloudException) {
        if (!(this_present_cloudException && that_present_cloudException))
          return false;
        if (!this.cloudException.equals(that.cloudException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudException()) ? 131071 : 524287);
      if (isSetCloudException())
        hashCode = hashCode * 8191 + cloudException.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetCloudException(), other.isSetCloudException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudException, other.cloudException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteCloudCluster_result(");
      boolean first = true;

      sb.append("cloudException:");
      if (this.cloudException == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCloudCluster_resultStandardScheme getScheme() {
        return new deleteCloudCluster_resultStandardScheme();
      }
    }

    private static class deleteCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cloudException = new CloudException();
                struct.cloudException.read(iprot);
                struct.setCloudExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudException != null) {
          oprot.writeFieldBegin(CLOUD_EXCEPTION_FIELD_DESC);
          struct.cloudException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteCloudCluster_resultTupleScheme getScheme() {
        return new deleteCloudCluster_resultTupleScheme();
      }
    }

    private static class deleteCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudException()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudException()) {
          struct.cloudException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudException = new CloudException();
          struct.cloudException.read(iprot);
          struct.setCloudExceptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeOnController_args implements org.apache.thrift.TBase<executeOnController_args, executeOnController_args._Fields>, java.io.Serializable, Cloneable, Comparable<executeOnController_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeOnController_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SCRIPT_FIELD_DESC = new org.apache.thrift.protocol.TField("script", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField LANG_FIELD_DESC = new org.apache.thrift.protocol.TField("lang", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeOnController_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeOnController_argsTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable java.lang.String clusterId; // required
    public @org.apache.thrift.annotation.Nullable java.lang.String script; // required
    /**
     * 
     * @see Lang
     */
    public @org.apache.thrift.annotation.Nullable Lang lang; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      SCRIPT((short)2, "script"),
      /**
       * 
       * @see Lang
       */
      LANG((short)3, "lang");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // SCRIPT
            return SCRIPT;
          case 3: // LANG
            return LANG;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SCRIPT, new org.apache.thrift.meta_data.FieldMetaData("script", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LANG, new org.apache.thrift.meta_data.FieldMetaData("lang", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Lang.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeOnController_args.class, metaDataMap);
    }

    public executeOnController_args() {
    }

    public executeOnController_args(
      java.lang.String clusterId,
      java.lang.String script,
      Lang lang)
    {
      this();
      this.clusterId = clusterId;
      this.script = script;
      this.lang = lang;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeOnController_args(executeOnController_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetScript()) {
        this.script = other.script;
      }
      if (other.isSetLang()) {
        this.lang = other.lang;
      }
    }

    public executeOnController_args deepCopy() {
      return new executeOnController_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.script = null;
      this.lang = null;
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public executeOnController_args setClusterId(@org.apache.thrift.annotation.Nullable java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.String getScript() {
      return this.script;
    }

    public executeOnController_args setScript(@org.apache.thrift.annotation.Nullable java.lang.String script) {
      this.script = script;
      return this;
    }

    public void unsetScript() {
      this.script = null;
    }

    /** Returns true if field script is set (has been assigned a value) and false otherwise */
    public boolean isSetScript() {
      return this.script != null;
    }

    public void setScriptIsSet(boolean value) {
      if (!value) {
        this.script = null;
      }
    }

    /**
     * 
     * @see Lang
     */
    @org.apache.thrift.annotation.Nullable
    public Lang getLang() {
      return this.lang;
    }

    /**
     * 
     * @see Lang
     */
    public executeOnController_args setLang(@org.apache.thrift.annotation.Nullable Lang lang) {
      this.lang = lang;
      return this;
    }

    public void unsetLang() {
      this.lang = null;
    }

    /** Returns true if field lang is set (has been assigned a value) and false otherwise */
    public boolean isSetLang() {
      return this.lang != null;
    }

    public void setLangIsSet(boolean value) {
      if (!value) {
        this.lang = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case SCRIPT:
        if (value == null) {
          unsetScript();
        } else {
          setScript((java.lang.String)value);
        }
        break;

      case LANG:
        if (value == null) {
          unsetLang();
        } else {
          setLang((Lang)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case SCRIPT:
        return getScript();

      case LANG:
        return getLang();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case SCRIPT:
        return isSetScript();
      case LANG:
        return isSetLang();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof executeOnController_args)
        return this.equals((executeOnController_args)that);
      return false;
    }

    public boolean equals(executeOnController_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_script = true && this.isSetScript();
      boolean that_present_script = true && that.isSetScript();
      if (this_present_script || that_present_script) {
        if (!(this_present_script && that_present_script))
          return false;
        if (!this.script.equals(that.script))
          return false;
      }

      boolean this_present_lang = true && this.isSetLang();
      boolean that_present_lang = true && that.isSetLang();
      if (this_present_lang || that_present_lang) {
        if (!(this_present_lang && that_present_lang))
          return false;
        if (!this.lang.equals(that.lang))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetScript()) ? 131071 : 524287);
      if (isSetScript())
        hashCode = hashCode * 8191 + script.hashCode();

      hashCode = hashCode * 8191 + ((isSetLang()) ? 131071 : 524287);
      if (isSetLang())
        hashCode = hashCode * 8191 + lang.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(executeOnController_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetClusterId(), other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetScript(), other.isSetScript());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetScript()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.script, other.script);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.compare(isSetLang(), other.isSetLang());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLang()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lang, other.lang);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeOnController_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("script:");
      if (this.script == null) {
        sb.append("null");
      } else {
        sb.append(this.script);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("lang:");
      if (this.lang == null) {
        sb.append("null");
      } else {
        sb.append(this.lang);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeOnController_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeOnController_argsStandardScheme getScheme() {
        return new executeOnController_argsStandardScheme();
      }
    }

    private static class executeOnController_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeOnController_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeOnController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SCRIPT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.script = iprot.readString();
                struct.setScriptIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // LANG
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.lang = com.hazelcast.remotecontroller.Lang.findByValue(iprot.readI32());
                struct.setLangIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeOnController_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.script != null) {
          oprot.writeFieldBegin(SCRIPT_FIELD_DESC);
          oprot.writeString(struct.script);
          oprot.writeFieldEnd();
        }
        if (struct.lang != null) {
          oprot.writeFieldBegin(LANG_FIELD_DESC);
          oprot.writeI32(struct.lang.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeOnController_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeOnController_argsTupleScheme getScheme() {
        return new executeOnController_argsTupleScheme();
      }
    }

    private static class executeOnController_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeOnController_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeOnController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetScript()) {
          optionals.set(1);
        }
        if (struct.isSetLang()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetScript()) {
          oprot.writeString(struct.script);
        }
        if (struct.isSetLang()) {
          oprot.writeI32(struct.lang.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeOnController_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.script = iprot.readString();
          struct.setScriptIsSet(true);
        }
        if (incoming.get(2)) {
          struct.lang = com.hazelcast.remotecontroller.Lang.findByValue(iprot.readI32());
          struct.setLangIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class executeOnController_result implements org.apache.thrift.TBase<executeOnController_result, executeOnController_result._Fields>, java.io.Serializable, Cloneable, Comparable<executeOnController_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("executeOnController_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new executeOnController_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new executeOnController_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(executeOnController_result.class, metaDataMap);
    }

    public executeOnController_result() {
    }

    public executeOnController_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public executeOnController_result(executeOnController_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    public executeOnController_result deepCopy() {
      return new executeOnController_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Response getSuccess() {
      return this.success;
    }

    public executeOnController_result setSuccess(@org.apache.thrift.annotation.Nullable Response success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that instanceof executeOnController_result)
        return this.equals((executeOnController_result)that);
      return false;
    }

    public boolean equals(executeOnController_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(executeOnController_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.compare(isSetSuccess(), other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("executeOnController_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class executeOnController_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeOnController_resultStandardScheme getScheme() {
        return new executeOnController_resultStandardScheme();
      }
    }

    private static class executeOnController_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<executeOnController_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, executeOnController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, executeOnController_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class executeOnController_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public executeOnController_resultTupleScheme getScheme() {
        return new executeOnController_resultTupleScheme();
      }
    }

    private static class executeOnController_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<executeOnController_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, executeOnController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, executeOnController_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
