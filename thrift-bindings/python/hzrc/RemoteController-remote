#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from hzrc import RemoteController
from hzrc.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool ping()')
    print('  bool clean()')
    print('  bool exit()')
    print('  Cluster createCluster(string hzVersion, string xmlconfig)')
    print('  Cluster createClusterKeepClusterName(string hzVersion, string xmlconfig)')
    print('  Member startMember(string clusterId)')
    print('  bool shutdownMember(string clusterId, string memberId)')
    print('  bool terminateMember(string clusterId, string memberId)')
    print('  bool suspendMember(string clusterId, string memberId)')
    print('  bool resumeMember(string clusterId, string memberId)')
    print('  bool shutdownCluster(string clusterId)')
    print('  bool terminateCluster(string clusterId)')
    print('  Cluster splitMemberFromCluster(string memberId)')
    print('  Cluster mergeMemberToCluster(string clusterId, string memberId)')
    print('  void loginToCloudUsingEnvironment()')
    print('  void loginToCloud(string baseUrl, string apiKey, string apiSecret)')
    print('  CloudCluster createCloudCluster(string hazelcastVersion, bool isTlsEnabled)')
    print('  CloudCluster getCloudCluster(string cloudClusterId)')
    print('  CloudCluster stopCloudCluster(string cloudClusterId)')
    print('  CloudCluster resumeCloudCluster(string cloudClusterId)')
    print('  void deleteCloudCluster(string cloudClusterId)')
    print('  Response executeOnController(string clusterId, string script, Lang lang)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = RemoteController.Client(protocol)
transport.open()

if cmd == 'ping':
    if len(args) != 0:
        print('ping requires 0 args')
        sys.exit(1)
    pp.pprint(client.ping())

elif cmd == 'clean':
    if len(args) != 0:
        print('clean requires 0 args')
        sys.exit(1)
    pp.pprint(client.clean())

elif cmd == 'exit':
    if len(args) != 0:
        print('exit requires 0 args')
        sys.exit(1)
    pp.pprint(client.exit())

elif cmd == 'createCluster':
    if len(args) != 2:
        print('createCluster requires 2 args')
        sys.exit(1)
    pp.pprint(client.createCluster(args[0], args[1],))

elif cmd == 'createClusterKeepClusterName':
    if len(args) != 2:
        print('createClusterKeepClusterName requires 2 args')
        sys.exit(1)
    pp.pprint(client.createClusterKeepClusterName(args[0], args[1],))

elif cmd == 'startMember':
    if len(args) != 1:
        print('startMember requires 1 args')
        sys.exit(1)
    pp.pprint(client.startMember(args[0],))

elif cmd == 'shutdownMember':
    if len(args) != 2:
        print('shutdownMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.shutdownMember(args[0], args[1],))

elif cmd == 'terminateMember':
    if len(args) != 2:
        print('terminateMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.terminateMember(args[0], args[1],))

elif cmd == 'suspendMember':
    if len(args) != 2:
        print('suspendMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.suspendMember(args[0], args[1],))

elif cmd == 'resumeMember':
    if len(args) != 2:
        print('resumeMember requires 2 args')
        sys.exit(1)
    pp.pprint(client.resumeMember(args[0], args[1],))

elif cmd == 'shutdownCluster':
    if len(args) != 1:
        print('shutdownCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.shutdownCluster(args[0],))

elif cmd == 'terminateCluster':
    if len(args) != 1:
        print('terminateCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.terminateCluster(args[0],))

elif cmd == 'splitMemberFromCluster':
    if len(args) != 1:
        print('splitMemberFromCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.splitMemberFromCluster(args[0],))

elif cmd == 'mergeMemberToCluster':
    if len(args) != 2:
        print('mergeMemberToCluster requires 2 args')
        sys.exit(1)
    pp.pprint(client.mergeMemberToCluster(args[0], args[1],))

elif cmd == 'loginToCloudUsingEnvironment':
    if len(args) != 0:
        print('loginToCloudUsingEnvironment requires 0 args')
        sys.exit(1)
    pp.pprint(client.loginToCloudUsingEnvironment())

elif cmd == 'loginToCloud':
    if len(args) != 3:
        print('loginToCloud requires 3 args')
        sys.exit(1)
    pp.pprint(client.loginToCloud(args[0], args[1], args[2],))

elif cmd == 'createCloudCluster':
    if len(args) != 2:
        print('createCloudCluster requires 2 args')
        sys.exit(1)
    pp.pprint(client.createCloudCluster(args[0], eval(args[1]),))

elif cmd == 'getCloudCluster':
    if len(args) != 1:
        print('getCloudCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.getCloudCluster(args[0],))

elif cmd == 'stopCloudCluster':
    if len(args) != 1:
        print('stopCloudCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.stopCloudCluster(args[0],))

elif cmd == 'resumeCloudCluster':
    if len(args) != 1:
        print('resumeCloudCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.resumeCloudCluster(args[0],))

elif cmd == 'deleteCloudCluster':
    if len(args) != 1:
        print('deleteCloudCluster requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteCloudCluster(args[0],))

elif cmd == 'executeOnController':
    if len(args) != 3:
        print('executeOnController requires 3 args')
        sys.exit(1)
    pp.pprint(client.executeOnController(args[0], args[1], eval(args[2]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
