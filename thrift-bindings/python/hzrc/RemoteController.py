#
# Autogenerated by Thrift Compiler (0.15.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:new_style,utf8strings
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def ping(self):
        pass

    def clean(self):
        pass

    def exit(self):
        pass

    def createCluster(self, hzVersion, xmlconfig):
        """
        Parameters:
         - hzVersion
         - xmlconfig

        """
        pass

    def createClusterKeepClusterName(self, hzVersion, xmlconfig):
        """
        Parameters:
         - hzVersion
         - xmlconfig

        """
        pass

    def startMember(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        pass

    def shutdownMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        pass

    def terminateMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        pass

    def suspendMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        pass

    def resumeMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        pass

    def shutdownCluster(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        pass

    def terminateCluster(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        pass

    def splitMemberFromCluster(self, memberId):
        """
        Parameters:
         - memberId

        """
        pass

    def mergeMemberToCluster(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        pass

    def loginToCloudUsingEnvironment(self):
        """
        Reads the environment variables and calls loginToCloud() method with these variables.
        @throws CloudException

        """
        pass

    def loginToCloud(self, baseUrl, apiKey, apiSecret):
        """
        Logins to the cloud, sets the bearerToken, baseUrl variables in CloudManager to make it ready to use cloud API
        @throws CloudException

        @param baseUrl -> Base url of the cloud environment. i.e. https://uat.hazelcast.cloud
        @param apiKey -> Api key of the hazelcast cloud
        @param apiSecret -> Api secret of the hazelcast cloud

        Parameters:
         - baseUrl
         - apiKey
         - apiSecret

        """
        pass

    def createCloudCluster(self, hazelcastVersion, isTlsEnabled):
        """
        Creates a cluster
        @return CloudCluster
        @throws CloudException

        @param hazelcastVersion -> Hazelcast version
        @param isTlsEnabled -> True if ssl enabled cluster is requested, otherwise false.

        Parameters:
         - hazelcastVersion
         - isTlsEnabled

        """
        pass

    def getCloudCluster(self, cloudClusterId):
        """
        Get information of the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId -> Id of the cluster

        Parameters:
         - cloudClusterId

        """
        pass

    def stopCloudCluster(self, cloudClusterId):
        """
        Stops the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId -> Id of the cluster

        Parameters:
         - cloudClusterId

        """
        pass

    def resumeCloudCluster(self, cloudClusterId):
        """
        Resumes the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId

        Parameters:
         - cloudClusterId

        """
        pass

    def deleteCloudCluster(self, cloudClusterId):
        """
        Deletes the given cluster
        @return boolean
        @throws CloudException

        @param cloudClusterId

        Parameters:
         - cloudClusterId

        """
        pass

    def executeOnController(self, clusterId, script, lang):
        """
        Parameters:
         - clusterId
         - script
         - lang

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def ping(self):
        self.send_ping()
        return self.recv_ping()

    def send_ping(self):
        self._oprot.writeMessageBegin('ping', TMessageType.CALL, self._seqid)
        args = ping_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_ping(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = ping_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "ping failed: unknown result")

    def clean(self):
        self.send_clean()
        return self.recv_clean()

    def send_clean(self):
        self._oprot.writeMessageBegin('clean', TMessageType.CALL, self._seqid)
        args = clean_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_clean(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = clean_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "clean failed: unknown result")

    def exit(self):
        self.send_exit()
        return self.recv_exit()

    def send_exit(self):
        self._oprot.writeMessageBegin('exit', TMessageType.CALL, self._seqid)
        args = exit_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_exit(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = exit_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "exit failed: unknown result")

    def createCluster(self, hzVersion, xmlconfig):
        """
        Parameters:
         - hzVersion
         - xmlconfig

        """
        self.send_createCluster(hzVersion, xmlconfig)
        return self.recv_createCluster()

    def send_createCluster(self, hzVersion, xmlconfig):
        self._oprot.writeMessageBegin('createCluster', TMessageType.CALL, self._seqid)
        args = createCluster_args()
        args.hzVersion = hzVersion
        args.xmlconfig = xmlconfig
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.serverException is not None:
            raise result.serverException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createCluster failed: unknown result")

    def createClusterKeepClusterName(self, hzVersion, xmlconfig):
        """
        Parameters:
         - hzVersion
         - xmlconfig

        """
        self.send_createClusterKeepClusterName(hzVersion, xmlconfig)
        return self.recv_createClusterKeepClusterName()

    def send_createClusterKeepClusterName(self, hzVersion, xmlconfig):
        self._oprot.writeMessageBegin('createClusterKeepClusterName', TMessageType.CALL, self._seqid)
        args = createClusterKeepClusterName_args()
        args.hzVersion = hzVersion
        args.xmlconfig = xmlconfig
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createClusterKeepClusterName(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createClusterKeepClusterName_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.serverException is not None:
            raise result.serverException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createClusterKeepClusterName failed: unknown result")

    def startMember(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        self.send_startMember(clusterId)
        return self.recv_startMember()

    def send_startMember(self, clusterId):
        self._oprot.writeMessageBegin('startMember', TMessageType.CALL, self._seqid)
        args = startMember_args()
        args.clusterId = clusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_startMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = startMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.serverException is not None:
            raise result.serverException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "startMember failed: unknown result")

    def shutdownMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        self.send_shutdownMember(clusterId, memberId)
        return self.recv_shutdownMember()

    def send_shutdownMember(self, clusterId, memberId):
        self._oprot.writeMessageBegin('shutdownMember', TMessageType.CALL, self._seqid)
        args = shutdownMember_args()
        args.clusterId = clusterId
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_shutdownMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = shutdownMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "shutdownMember failed: unknown result")

    def terminateMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        self.send_terminateMember(clusterId, memberId)
        return self.recv_terminateMember()

    def send_terminateMember(self, clusterId, memberId):
        self._oprot.writeMessageBegin('terminateMember', TMessageType.CALL, self._seqid)
        args = terminateMember_args()
        args.clusterId = clusterId
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_terminateMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = terminateMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "terminateMember failed: unknown result")

    def suspendMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        self.send_suspendMember(clusterId, memberId)
        return self.recv_suspendMember()

    def send_suspendMember(self, clusterId, memberId):
        self._oprot.writeMessageBegin('suspendMember', TMessageType.CALL, self._seqid)
        args = suspendMember_args()
        args.clusterId = clusterId
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_suspendMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = suspendMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "suspendMember failed: unknown result")

    def resumeMember(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        self.send_resumeMember(clusterId, memberId)
        return self.recv_resumeMember()

    def send_resumeMember(self, clusterId, memberId):
        self._oprot.writeMessageBegin('resumeMember', TMessageType.CALL, self._seqid)
        args = resumeMember_args()
        args.clusterId = clusterId
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resumeMember(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resumeMember_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "resumeMember failed: unknown result")

    def shutdownCluster(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        self.send_shutdownCluster(clusterId)
        return self.recv_shutdownCluster()

    def send_shutdownCluster(self, clusterId):
        self._oprot.writeMessageBegin('shutdownCluster', TMessageType.CALL, self._seqid)
        args = shutdownCluster_args()
        args.clusterId = clusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_shutdownCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = shutdownCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "shutdownCluster failed: unknown result")

    def terminateCluster(self, clusterId):
        """
        Parameters:
         - clusterId

        """
        self.send_terminateCluster(clusterId)
        return self.recv_terminateCluster()

    def send_terminateCluster(self, clusterId):
        self._oprot.writeMessageBegin('terminateCluster', TMessageType.CALL, self._seqid)
        args = terminateCluster_args()
        args.clusterId = clusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_terminateCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = terminateCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "terminateCluster failed: unknown result")

    def splitMemberFromCluster(self, memberId):
        """
        Parameters:
         - memberId

        """
        self.send_splitMemberFromCluster(memberId)
        return self.recv_splitMemberFromCluster()

    def send_splitMemberFromCluster(self, memberId):
        self._oprot.writeMessageBegin('splitMemberFromCluster', TMessageType.CALL, self._seqid)
        args = splitMemberFromCluster_args()
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_splitMemberFromCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = splitMemberFromCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "splitMemberFromCluster failed: unknown result")

    def mergeMemberToCluster(self, clusterId, memberId):
        """
        Parameters:
         - clusterId
         - memberId

        """
        self.send_mergeMemberToCluster(clusterId, memberId)
        return self.recv_mergeMemberToCluster()

    def send_mergeMemberToCluster(self, clusterId, memberId):
        self._oprot.writeMessageBegin('mergeMemberToCluster', TMessageType.CALL, self._seqid)
        args = mergeMemberToCluster_args()
        args.clusterId = clusterId
        args.memberId = memberId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_mergeMemberToCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = mergeMemberToCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "mergeMemberToCluster failed: unknown result")

    def loginToCloudUsingEnvironment(self):
        """
        Reads the environment variables and calls loginToCloud() method with these variables.
        @throws CloudException

        """
        self.send_loginToCloudUsingEnvironment()
        self.recv_loginToCloudUsingEnvironment()

    def send_loginToCloudUsingEnvironment(self):
        self._oprot.writeMessageBegin('loginToCloudUsingEnvironment', TMessageType.CALL, self._seqid)
        args = loginToCloudUsingEnvironment_args()
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_loginToCloudUsingEnvironment(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = loginToCloudUsingEnvironment_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.cloudException is not None:
            raise result.cloudException
        return

    def loginToCloud(self, baseUrl, apiKey, apiSecret):
        """
        Logins to the cloud, sets the bearerToken, baseUrl variables in CloudManager to make it ready to use cloud API
        @throws CloudException

        @param baseUrl -> Base url of the cloud environment. i.e. https://uat.hazelcast.cloud
        @param apiKey -> Api key of the hazelcast cloud
        @param apiSecret -> Api secret of the hazelcast cloud

        Parameters:
         - baseUrl
         - apiKey
         - apiSecret

        """
        self.send_loginToCloud(baseUrl, apiKey, apiSecret)
        self.recv_loginToCloud()

    def send_loginToCloud(self, baseUrl, apiKey, apiSecret):
        self._oprot.writeMessageBegin('loginToCloud', TMessageType.CALL, self._seqid)
        args = loginToCloud_args()
        args.baseUrl = baseUrl
        args.apiKey = apiKey
        args.apiSecret = apiSecret
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_loginToCloud(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = loginToCloud_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.cloudException is not None:
            raise result.cloudException
        return

    def createCloudCluster(self, hazelcastVersion, isTlsEnabled):
        """
        Creates a cluster
        @return CloudCluster
        @throws CloudException

        @param hazelcastVersion -> Hazelcast version
        @param isTlsEnabled -> True if ssl enabled cluster is requested, otherwise false.

        Parameters:
         - hazelcastVersion
         - isTlsEnabled

        """
        self.send_createCloudCluster(hazelcastVersion, isTlsEnabled)
        return self.recv_createCloudCluster()

    def send_createCloudCluster(self, hazelcastVersion, isTlsEnabled):
        self._oprot.writeMessageBegin('createCloudCluster', TMessageType.CALL, self._seqid)
        args = createCloudCluster_args()
        args.hazelcastVersion = hazelcastVersion
        args.isTlsEnabled = isTlsEnabled
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_createCloudCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = createCloudCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.cloudException is not None:
            raise result.cloudException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "createCloudCluster failed: unknown result")

    def getCloudCluster(self, cloudClusterId):
        """
        Get information of the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId -> Id of the cluster

        Parameters:
         - cloudClusterId

        """
        self.send_getCloudCluster(cloudClusterId)
        return self.recv_getCloudCluster()

    def send_getCloudCluster(self, cloudClusterId):
        self._oprot.writeMessageBegin('getCloudCluster', TMessageType.CALL, self._seqid)
        args = getCloudCluster_args()
        args.cloudClusterId = cloudClusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_getCloudCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = getCloudCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.cloudException is not None:
            raise result.cloudException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "getCloudCluster failed: unknown result")

    def stopCloudCluster(self, cloudClusterId):
        """
        Stops the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId -> Id of the cluster

        Parameters:
         - cloudClusterId

        """
        self.send_stopCloudCluster(cloudClusterId)
        return self.recv_stopCloudCluster()

    def send_stopCloudCluster(self, cloudClusterId):
        self._oprot.writeMessageBegin('stopCloudCluster', TMessageType.CALL, self._seqid)
        args = stopCloudCluster_args()
        args.cloudClusterId = cloudClusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_stopCloudCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = stopCloudCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.cloudException is not None:
            raise result.cloudException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "stopCloudCluster failed: unknown result")

    def resumeCloudCluster(self, cloudClusterId):
        """
        Resumes the given cluster
        @return CloudCluster
        @throws CloudException

        @param cloudClusterId

        Parameters:
         - cloudClusterId

        """
        self.send_resumeCloudCluster(cloudClusterId)
        return self.recv_resumeCloudCluster()

    def send_resumeCloudCluster(self, cloudClusterId):
        self._oprot.writeMessageBegin('resumeCloudCluster', TMessageType.CALL, self._seqid)
        args = resumeCloudCluster_args()
        args.cloudClusterId = cloudClusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_resumeCloudCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = resumeCloudCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.cloudException is not None:
            raise result.cloudException
        raise TApplicationException(TApplicationException.MISSING_RESULT, "resumeCloudCluster failed: unknown result")

    def deleteCloudCluster(self, cloudClusterId):
        """
        Deletes the given cluster
        @return boolean
        @throws CloudException

        @param cloudClusterId

        Parameters:
         - cloudClusterId

        """
        self.send_deleteCloudCluster(cloudClusterId)
        self.recv_deleteCloudCluster()

    def send_deleteCloudCluster(self, cloudClusterId):
        self._oprot.writeMessageBegin('deleteCloudCluster', TMessageType.CALL, self._seqid)
        args = deleteCloudCluster_args()
        args.cloudClusterId = cloudClusterId
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_deleteCloudCluster(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = deleteCloudCluster_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.cloudException is not None:
            raise result.cloudException
        return

    def executeOnController(self, clusterId, script, lang):
        """
        Parameters:
         - clusterId
         - script
         - lang

        """
        self.send_executeOnController(clusterId, script, lang)
        return self.recv_executeOnController()

    def send_executeOnController(self, clusterId, script, lang):
        self._oprot.writeMessageBegin('executeOnController', TMessageType.CALL, self._seqid)
        args = executeOnController_args()
        args.clusterId = clusterId
        args.script = script
        args.lang = lang
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_executeOnController(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = executeOnController_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        raise TApplicationException(TApplicationException.MISSING_RESULT, "executeOnController failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["ping"] = Processor.process_ping
        self._processMap["clean"] = Processor.process_clean
        self._processMap["exit"] = Processor.process_exit
        self._processMap["createCluster"] = Processor.process_createCluster
        self._processMap["createClusterKeepClusterName"] = Processor.process_createClusterKeepClusterName
        self._processMap["startMember"] = Processor.process_startMember
        self._processMap["shutdownMember"] = Processor.process_shutdownMember
        self._processMap["terminateMember"] = Processor.process_terminateMember
        self._processMap["suspendMember"] = Processor.process_suspendMember
        self._processMap["resumeMember"] = Processor.process_resumeMember
        self._processMap["shutdownCluster"] = Processor.process_shutdownCluster
        self._processMap["terminateCluster"] = Processor.process_terminateCluster
        self._processMap["splitMemberFromCluster"] = Processor.process_splitMemberFromCluster
        self._processMap["mergeMemberToCluster"] = Processor.process_mergeMemberToCluster
        self._processMap["loginToCloudUsingEnvironment"] = Processor.process_loginToCloudUsingEnvironment
        self._processMap["loginToCloud"] = Processor.process_loginToCloud
        self._processMap["createCloudCluster"] = Processor.process_createCloudCluster
        self._processMap["getCloudCluster"] = Processor.process_getCloudCluster
        self._processMap["stopCloudCluster"] = Processor.process_stopCloudCluster
        self._processMap["resumeCloudCluster"] = Processor.process_resumeCloudCluster
        self._processMap["deleteCloudCluster"] = Processor.process_deleteCloudCluster
        self._processMap["executeOnController"] = Processor.process_executeOnController
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_ping(self, seqid, iprot, oprot):
        args = ping_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = ping_result()
        try:
            result.success = self._handler.ping()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("ping", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_clean(self, seqid, iprot, oprot):
        args = clean_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = clean_result()
        try:
            result.success = self._handler.clean()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("clean", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_exit(self, seqid, iprot, oprot):
        args = exit_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = exit_result()
        try:
            result.success = self._handler.exit()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("exit", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createCluster(self, seqid, iprot, oprot):
        args = createCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createCluster_result()
        try:
            result.success = self._handler.createCluster(args.hzVersion, args.xmlconfig)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServerException as serverException:
            msg_type = TMessageType.REPLY
            result.serverException = serverException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createClusterKeepClusterName(self, seqid, iprot, oprot):
        args = createClusterKeepClusterName_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createClusterKeepClusterName_result()
        try:
            result.success = self._handler.createClusterKeepClusterName(args.hzVersion, args.xmlconfig)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServerException as serverException:
            msg_type = TMessageType.REPLY
            result.serverException = serverException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createClusterKeepClusterName", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_startMember(self, seqid, iprot, oprot):
        args = startMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = startMember_result()
        try:
            result.success = self._handler.startMember(args.clusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except ServerException as serverException:
            msg_type = TMessageType.REPLY
            result.serverException = serverException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("startMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_shutdownMember(self, seqid, iprot, oprot):
        args = shutdownMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = shutdownMember_result()
        try:
            result.success = self._handler.shutdownMember(args.clusterId, args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("shutdownMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_terminateMember(self, seqid, iprot, oprot):
        args = terminateMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = terminateMember_result()
        try:
            result.success = self._handler.terminateMember(args.clusterId, args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("terminateMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_suspendMember(self, seqid, iprot, oprot):
        args = suspendMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = suspendMember_result()
        try:
            result.success = self._handler.suspendMember(args.clusterId, args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("suspendMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resumeMember(self, seqid, iprot, oprot):
        args = resumeMember_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resumeMember_result()
        try:
            result.success = self._handler.resumeMember(args.clusterId, args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resumeMember", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_shutdownCluster(self, seqid, iprot, oprot):
        args = shutdownCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = shutdownCluster_result()
        try:
            result.success = self._handler.shutdownCluster(args.clusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("shutdownCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_terminateCluster(self, seqid, iprot, oprot):
        args = terminateCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = terminateCluster_result()
        try:
            result.success = self._handler.terminateCluster(args.clusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("terminateCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_splitMemberFromCluster(self, seqid, iprot, oprot):
        args = splitMemberFromCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = splitMemberFromCluster_result()
        try:
            result.success = self._handler.splitMemberFromCluster(args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("splitMemberFromCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_mergeMemberToCluster(self, seqid, iprot, oprot):
        args = mergeMemberToCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = mergeMemberToCluster_result()
        try:
            result.success = self._handler.mergeMemberToCluster(args.clusterId, args.memberId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("mergeMemberToCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_loginToCloudUsingEnvironment(self, seqid, iprot, oprot):
        args = loginToCloudUsingEnvironment_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = loginToCloudUsingEnvironment_result()
        try:
            self._handler.loginToCloudUsingEnvironment()
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("loginToCloudUsingEnvironment", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_loginToCloud(self, seqid, iprot, oprot):
        args = loginToCloud_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = loginToCloud_result()
        try:
            self._handler.loginToCloud(args.baseUrl, args.apiKey, args.apiSecret)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("loginToCloud", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_createCloudCluster(self, seqid, iprot, oprot):
        args = createCloudCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = createCloudCluster_result()
        try:
            result.success = self._handler.createCloudCluster(args.hazelcastVersion, args.isTlsEnabled)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("createCloudCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_getCloudCluster(self, seqid, iprot, oprot):
        args = getCloudCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = getCloudCluster_result()
        try:
            result.success = self._handler.getCloudCluster(args.cloudClusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("getCloudCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_stopCloudCluster(self, seqid, iprot, oprot):
        args = stopCloudCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = stopCloudCluster_result()
        try:
            result.success = self._handler.stopCloudCluster(args.cloudClusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("stopCloudCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_resumeCloudCluster(self, seqid, iprot, oprot):
        args = resumeCloudCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = resumeCloudCluster_result()
        try:
            result.success = self._handler.resumeCloudCluster(args.cloudClusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("resumeCloudCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_deleteCloudCluster(self, seqid, iprot, oprot):
        args = deleteCloudCluster_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = deleteCloudCluster_result()
        try:
            self._handler.deleteCloudCluster(args.cloudClusterId)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except CloudException as cloudException:
            msg_type = TMessageType.REPLY
            result.cloudException = cloudException
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("deleteCloudCluster", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_executeOnController(self, seqid, iprot, oprot):
        args = executeOnController_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = executeOnController_result()
        try:
            result.success = self._handler.executeOnController(args.clusterId, args.script, args.lang)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("executeOnController", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class ping_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_args)
ping_args.thrift_spec = (
)


class ping_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ping_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ping_result)
ping_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class clean_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('clean_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(clean_args)
clean_args.thrift_spec = (
)


class clean_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('clean_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(clean_result)
clean_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class exit_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exit_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exit_args)
exit_args.thrift_spec = (
)


class exit_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('exit_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(exit_result)
exit_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class createCluster_args(object):
    """
    Attributes:
     - hzVersion
     - xmlconfig

    """


    def __init__(self, hzVersion=None, xmlconfig=None,):
        self.hzVersion = hzVersion
        self.xmlconfig = xmlconfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hzVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.xmlconfig = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCluster_args')
        if self.hzVersion is not None:
            oprot.writeFieldBegin('hzVersion', TType.STRING, 1)
            oprot.writeString(self.hzVersion.encode('utf-8') if sys.version_info[0] == 2 else self.hzVersion)
            oprot.writeFieldEnd()
        if self.xmlconfig is not None:
            oprot.writeFieldBegin('xmlconfig', TType.STRING, 2)
            oprot.writeString(self.xmlconfig.encode('utf-8') if sys.version_info[0] == 2 else self.xmlconfig)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCluster_args)
createCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hzVersion', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'xmlconfig', 'UTF8', None, ),  # 2
)


class createCluster_result(object):
    """
    Attributes:
     - success
     - serverException

    """


    def __init__(self, success=None, serverException=None,):
        self.success = success
        self.serverException = serverException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.serverException = ServerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.serverException is not None:
            oprot.writeFieldBegin('serverException', TType.STRUCT, 1)
            self.serverException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCluster_result)
createCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cluster, None], None, ),  # 0
    (1, TType.STRUCT, 'serverException', [ServerException, None], None, ),  # 1
)


class createClusterKeepClusterName_args(object):
    """
    Attributes:
     - hzVersion
     - xmlconfig

    """


    def __init__(self, hzVersion=None, xmlconfig=None,):
        self.hzVersion = hzVersion
        self.xmlconfig = xmlconfig

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hzVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.xmlconfig = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createClusterKeepClusterName_args')
        if self.hzVersion is not None:
            oprot.writeFieldBegin('hzVersion', TType.STRING, 1)
            oprot.writeString(self.hzVersion.encode('utf-8') if sys.version_info[0] == 2 else self.hzVersion)
            oprot.writeFieldEnd()
        if self.xmlconfig is not None:
            oprot.writeFieldBegin('xmlconfig', TType.STRING, 2)
            oprot.writeString(self.xmlconfig.encode('utf-8') if sys.version_info[0] == 2 else self.xmlconfig)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createClusterKeepClusterName_args)
createClusterKeepClusterName_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hzVersion', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'xmlconfig', 'UTF8', None, ),  # 2
)


class createClusterKeepClusterName_result(object):
    """
    Attributes:
     - success
     - serverException

    """


    def __init__(self, success=None, serverException=None,):
        self.success = success
        self.serverException = serverException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.serverException = ServerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createClusterKeepClusterName_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.serverException is not None:
            oprot.writeFieldBegin('serverException', TType.STRUCT, 1)
            self.serverException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createClusterKeepClusterName_result)
createClusterKeepClusterName_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cluster, None], None, ),  # 0
    (1, TType.STRUCT, 'serverException', [ServerException, None], None, ),  # 1
)


class startMember_args(object):
    """
    Attributes:
     - clusterId

    """


    def __init__(self, clusterId=None,):
        self.clusterId = clusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startMember_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startMember_args)
startMember_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
)


class startMember_result(object):
    """
    Attributes:
     - success
     - serverException

    """


    def __init__(self, success=None, serverException=None,):
        self.success = success
        self.serverException = serverException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Member()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.serverException = ServerException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('startMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.serverException is not None:
            oprot.writeFieldBegin('serverException', TType.STRUCT, 1)
            self.serverException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(startMember_result)
startMember_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Member, None], None, ),  # 0
    (1, TType.STRUCT, 'serverException', [ServerException, None], None, ),  # 1
)


class shutdownMember_args(object):
    """
    Attributes:
     - clusterId
     - memberId

    """


    def __init__(self, clusterId=None, memberId=None,):
        self.clusterId = clusterId
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shutdownMember_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 2)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shutdownMember_args)
shutdownMember_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'memberId', 'UTF8', None, ),  # 2
)


class shutdownMember_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shutdownMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shutdownMember_result)
shutdownMember_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class terminateMember_args(object):
    """
    Attributes:
     - clusterId
     - memberId

    """


    def __init__(self, clusterId=None, memberId=None,):
        self.clusterId = clusterId
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminateMember_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 2)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminateMember_args)
terminateMember_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'memberId', 'UTF8', None, ),  # 2
)


class terminateMember_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminateMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminateMember_result)
terminateMember_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class suspendMember_args(object):
    """
    Attributes:
     - clusterId
     - memberId

    """


    def __init__(self, clusterId=None, memberId=None,):
        self.clusterId = clusterId
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('suspendMember_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 2)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(suspendMember_args)
suspendMember_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'memberId', 'UTF8', None, ),  # 2
)


class suspendMember_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('suspendMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(suspendMember_result)
suspendMember_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class resumeMember_args(object):
    """
    Attributes:
     - clusterId
     - memberId

    """


    def __init__(self, clusterId=None, memberId=None,):
        self.clusterId = clusterId
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resumeMember_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 2)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resumeMember_args)
resumeMember_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'memberId', 'UTF8', None, ),  # 2
)


class resumeMember_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resumeMember_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resumeMember_result)
resumeMember_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class shutdownCluster_args(object):
    """
    Attributes:
     - clusterId

    """


    def __init__(self, clusterId=None,):
        self.clusterId = clusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shutdownCluster_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shutdownCluster_args)
shutdownCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
)


class shutdownCluster_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('shutdownCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(shutdownCluster_result)
shutdownCluster_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class terminateCluster_args(object):
    """
    Attributes:
     - clusterId

    """


    def __init__(self, clusterId=None,):
        self.clusterId = clusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminateCluster_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminateCluster_args)
terminateCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
)


class terminateCluster_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('terminateCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(terminateCluster_result)
terminateCluster_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
)


class splitMemberFromCluster_args(object):
    """
    Attributes:
     - memberId

    """


    def __init__(self, memberId=None,):
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('splitMemberFromCluster_args')
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 1)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(splitMemberFromCluster_args)
splitMemberFromCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'memberId', 'UTF8', None, ),  # 1
)


class splitMemberFromCluster_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('splitMemberFromCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(splitMemberFromCluster_result)
splitMemberFromCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cluster, None], None, ),  # 0
)


class mergeMemberToCluster_args(object):
    """
    Attributes:
     - clusterId
     - memberId

    """


    def __init__(self, clusterId=None, memberId=None,):
        self.clusterId = clusterId
        self.memberId = memberId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.memberId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mergeMemberToCluster_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.memberId is not None:
            oprot.writeFieldBegin('memberId', TType.STRING, 2)
            oprot.writeString(self.memberId.encode('utf-8') if sys.version_info[0] == 2 else self.memberId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mergeMemberToCluster_args)
mergeMemberToCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'memberId', 'UTF8', None, ),  # 2
)


class mergeMemberToCluster_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Cluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('mergeMemberToCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(mergeMemberToCluster_result)
mergeMemberToCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Cluster, None], None, ),  # 0
)


class loginToCloudUsingEnvironment_args(object):


    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('loginToCloudUsingEnvironment_args')
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(loginToCloudUsingEnvironment_args)
loginToCloudUsingEnvironment_args.thrift_spec = (
)


class loginToCloudUsingEnvironment_result(object):
    """
    Attributes:
     - cloudException

    """


    def __init__(self, cloudException=None,):
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('loginToCloudUsingEnvironment_result')
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(loginToCloudUsingEnvironment_result)
loginToCloudUsingEnvironment_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class loginToCloud_args(object):
    """
    Attributes:
     - baseUrl
     - apiKey
     - apiSecret

    """


    def __init__(self, baseUrl=None, apiKey=None, apiSecret=None,):
        self.baseUrl = baseUrl
        self.apiKey = apiKey
        self.apiSecret = apiSecret

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.baseUrl = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.apiKey = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.apiSecret = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('loginToCloud_args')
        if self.baseUrl is not None:
            oprot.writeFieldBegin('baseUrl', TType.STRING, 1)
            oprot.writeString(self.baseUrl.encode('utf-8') if sys.version_info[0] == 2 else self.baseUrl)
            oprot.writeFieldEnd()
        if self.apiKey is not None:
            oprot.writeFieldBegin('apiKey', TType.STRING, 2)
            oprot.writeString(self.apiKey.encode('utf-8') if sys.version_info[0] == 2 else self.apiKey)
            oprot.writeFieldEnd()
        if self.apiSecret is not None:
            oprot.writeFieldBegin('apiSecret', TType.STRING, 3)
            oprot.writeString(self.apiSecret.encode('utf-8') if sys.version_info[0] == 2 else self.apiSecret)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(loginToCloud_args)
loginToCloud_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'baseUrl', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'apiKey', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'apiSecret', 'UTF8', None, ),  # 3
)


class loginToCloud_result(object):
    """
    Attributes:
     - cloudException

    """


    def __init__(self, cloudException=None,):
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('loginToCloud_result')
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(loginToCloud_result)
loginToCloud_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class createCloudCluster_args(object):
    """
    Attributes:
     - hazelcastVersion
     - isTlsEnabled

    """


    def __init__(self, hazelcastVersion=None, isTlsEnabled=None,):
        self.hazelcastVersion = hazelcastVersion
        self.isTlsEnabled = isTlsEnabled

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.hazelcastVersion = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.isTlsEnabled = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCloudCluster_args')
        if self.hazelcastVersion is not None:
            oprot.writeFieldBegin('hazelcastVersion', TType.STRING, 1)
            oprot.writeString(self.hazelcastVersion.encode('utf-8') if sys.version_info[0] == 2 else self.hazelcastVersion)
            oprot.writeFieldEnd()
        if self.isTlsEnabled is not None:
            oprot.writeFieldBegin('isTlsEnabled', TType.BOOL, 2)
            oprot.writeBool(self.isTlsEnabled)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCloudCluster_args)
createCloudCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'hazelcastVersion', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'isTlsEnabled', None, None, ),  # 2
)


class createCloudCluster_result(object):
    """
    Attributes:
     - success
     - cloudException

    """


    def __init__(self, success=None, cloudException=None,):
        self.success = success
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CloudCluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('createCloudCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(createCloudCluster_result)
createCloudCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CloudCluster, None], None, ),  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class getCloudCluster_args(object):
    """
    Attributes:
     - cloudClusterId

    """


    def __init__(self, cloudClusterId=None,):
        self.cloudClusterId = cloudClusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cloudClusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCloudCluster_args')
        if self.cloudClusterId is not None:
            oprot.writeFieldBegin('cloudClusterId', TType.STRING, 1)
            oprot.writeString(self.cloudClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudClusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCloudCluster_args)
getCloudCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cloudClusterId', 'UTF8', None, ),  # 1
)


class getCloudCluster_result(object):
    """
    Attributes:
     - success
     - cloudException

    """


    def __init__(self, success=None, cloudException=None,):
        self.success = success
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CloudCluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('getCloudCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(getCloudCluster_result)
getCloudCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CloudCluster, None], None, ),  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class stopCloudCluster_args(object):
    """
    Attributes:
     - cloudClusterId

    """


    def __init__(self, cloudClusterId=None,):
        self.cloudClusterId = cloudClusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cloudClusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stopCloudCluster_args')
        if self.cloudClusterId is not None:
            oprot.writeFieldBegin('cloudClusterId', TType.STRING, 1)
            oprot.writeString(self.cloudClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudClusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stopCloudCluster_args)
stopCloudCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cloudClusterId', 'UTF8', None, ),  # 1
)


class stopCloudCluster_result(object):
    """
    Attributes:
     - success
     - cloudException

    """


    def __init__(self, success=None, cloudException=None,):
        self.success = success
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CloudCluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stopCloudCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(stopCloudCluster_result)
stopCloudCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CloudCluster, None], None, ),  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class resumeCloudCluster_args(object):
    """
    Attributes:
     - cloudClusterId

    """


    def __init__(self, cloudClusterId=None,):
        self.cloudClusterId = cloudClusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cloudClusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resumeCloudCluster_args')
        if self.cloudClusterId is not None:
            oprot.writeFieldBegin('cloudClusterId', TType.STRING, 1)
            oprot.writeString(self.cloudClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudClusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resumeCloudCluster_args)
resumeCloudCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cloudClusterId', 'UTF8', None, ),  # 1
)


class resumeCloudCluster_result(object):
    """
    Attributes:
     - success
     - cloudException

    """


    def __init__(self, success=None, cloudException=None,):
        self.success = success
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = CloudCluster()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('resumeCloudCluster_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(resumeCloudCluster_result)
resumeCloudCluster_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [CloudCluster, None], None, ),  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class deleteCloudCluster_args(object):
    """
    Attributes:
     - cloudClusterId

    """


    def __init__(self, cloudClusterId=None,):
        self.cloudClusterId = cloudClusterId

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.cloudClusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteCloudCluster_args')
        if self.cloudClusterId is not None:
            oprot.writeFieldBegin('cloudClusterId', TType.STRING, 1)
            oprot.writeString(self.cloudClusterId.encode('utf-8') if sys.version_info[0] == 2 else self.cloudClusterId)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteCloudCluster_args)
deleteCloudCluster_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'cloudClusterId', 'UTF8', None, ),  # 1
)


class deleteCloudCluster_result(object):
    """
    Attributes:
     - cloudException

    """


    def __init__(self, cloudException=None,):
        self.cloudException = cloudException

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.cloudException = CloudException.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deleteCloudCluster_result')
        if self.cloudException is not None:
            oprot.writeFieldBegin('cloudException', TType.STRUCT, 1)
            self.cloudException.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(deleteCloudCluster_result)
deleteCloudCluster_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'cloudException', [CloudException, None], None, ),  # 1
)


class executeOnController_args(object):
    """
    Attributes:
     - clusterId
     - script
     - lang

    """


    def __init__(self, clusterId=None, script=None, lang=None,):
        self.clusterId = clusterId
        self.script = script
        self.lang = lang

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.script = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.lang = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeOnController_args')
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 1)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.script is not None:
            oprot.writeFieldBegin('script', TType.STRING, 2)
            oprot.writeString(self.script.encode('utf-8') if sys.version_info[0] == 2 else self.script)
            oprot.writeFieldEnd()
        if self.lang is not None:
            oprot.writeFieldBegin('lang', TType.I32, 3)
            oprot.writeI32(self.lang)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeOnController_args)
executeOnController_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'clusterId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'script', 'UTF8', None, ),  # 2
    (3, TType.I32, 'lang', None, None, ),  # 3
)


class executeOnController_result(object):
    """
    Attributes:
     - success

    """


    def __init__(self, success=None,):
        self.success = success

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = Response()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('executeOnController_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(executeOnController_result)
executeOnController_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [Response, None], None, ),  # 0
)
fix_spec(all_structs)
del all_structs
